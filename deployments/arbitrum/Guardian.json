{
  "address": "0x32503c775c322C3522905d1B448b4df4A7FFBd30",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "guardian",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "Approved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "guardians",
          "type": "address[]"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "approveThreshold",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "delayBlock",
          "type": "uint256"
        }
      ],
      "name": "ChangeGuardianConfig",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "guardian",
          "type": "address"
        }
      ],
      "name": "Register",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "clearApproves",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "closestReset",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getApproveProgress",
      "outputs": [
        {
          "internalType": "address",
          "name": "newAddress",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "progress",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "getGuardianConfig",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address[]",
              "name": "guardians",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "approveThreshold",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "delay",
              "type": "uint256"
            }
          ],
          "internalType": "struct IGuardian.GuardianConfig",
          "name": "config",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "addresses",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "isAddressInArray",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "resetAccountOwner",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "components": [
            {
              "internalType": "address[]",
              "name": "guardians",
              "type": "address[]"
            },
            {
              "internalType": "uint256",
              "name": "approveThreshold",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "delay",
              "type": "uint256"
            }
          ],
          "internalType": "struct IGuardian.GuardianConfig",
          "name": "config",
          "type": "tuple"
        }
      ],
      "name": "setConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x9e8fcda6a1d93bb1a752c61d2eb135559de308ceea02a87c21ba6256a4efcdf0",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x37aC88732AEdC52AA93b17EA2BA6f6263B435889",
    "contractAddress": null,
    "transactionIndex": 1,
    "gasUsed": "5726062",
    "logsBloom": "0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
    "blockHash": "0x280b0b85234db46b9e4b8a803404c6b52b8104d3a8e5a78b900cbccb8bc15124",
    "transactionHash": "0x9e8fcda6a1d93bb1a752c61d2eb135559de308ceea02a87c21ba6256a4efcdf0",
    "logs": [],
    "blockNumber": 119955880,
    "cumulativeGasUsed": "5726062",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 5,
  "solcInputHash": "6e4a3abd12603b88b1f7ffb92b25eb8d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"Approved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"guardians\",\"type\":\"address[]\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"approveThreshold\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"delayBlock\",\"type\":\"uint256\"}],\"name\":\"ChangeGuardianConfig\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"}],\"name\":\"Register\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"clearApproves\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"closestReset\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getApproveProgress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"newAddress\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"progress\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"getGuardianConfig\",\"outputs\":[{\"components\":[{\"internalType\":\"address[]\",\"name\":\"guardians\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"approveThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delay\",\"type\":\"uint256\"}],\"internalType\":\"struct IGuardian.GuardianConfig\",\"name\":\"config\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"isAddressInArray\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"resetAccountOwner\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address[]\",\"name\":\"guardians\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"approveThreshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"delay\",\"type\":\"uint256\"}],\"internalType\":\"struct IGuardian.GuardianConfig\",\"name\":\"config\",\"type\":\"tuple\"}],\"name\":\"setConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/samples/Guardian.sol\":\"Guardian\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xabf3f59bc0e5423eae45e459dbe92e7052c6983628d39008590edc852a62f94a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xcee5467d5d873fb75dae6f98c01a8d25dd609f9d0374c7d39217bd5f9539a2d6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../ERC1967/ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is IERC1822Proxiable, ERC1967Upgrade {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n}\\n\",\"keccak256\":\"0x85cc5aca68692044586dc5ca19a9868d3288f6b35d1085c620dd0278ed0abdaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/core/Helpers.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8.12;\\r\\n\\r\\n/* solhint-disable no-inline-assembly */\\r\\n\\r\\n/**\\r\\n * returned data from validateUserOp.\\r\\n * validateUserOp returns a uint256, with is created by `_packedValidationData` and parsed by `_parseValidationData`\\r\\n * @param aggregator - address(0) - the account validated the signature by itself.\\r\\n *              address(1) - the account failed to validate the signature.\\r\\n *              otherwise - this is an address of a signature aggregator that must be used to validate the signature.\\r\\n * @param validAfter - this UserOp is valid only after this timestamp.\\r\\n * @param validaUntil - this UserOp is valid only up to this timestamp.\\r\\n */\\r\\n    struct ValidationData {\\r\\n        address aggregator;\\r\\n        uint48 validAfter;\\r\\n        uint48 validUntil;\\r\\n    }\\r\\n\\r\\n//extract sigFailed, validAfter, validUntil.\\r\\n// also convert zero validUntil to type(uint48).max\\r\\n    function _parseValidationData(uint validationData) pure returns (ValidationData memory data) {\\r\\n        address aggregator = address(uint160(validationData));\\r\\n        uint48 validUntil = uint48(validationData >> 160);\\r\\n        if (validUntil == 0) {\\r\\n            validUntil = type(uint48).max;\\r\\n        }\\r\\n        uint48 validAfter = uint48(validationData >> (48 + 160));\\r\\n        return ValidationData(aggregator, validAfter, validUntil);\\r\\n    }\\r\\n\\r\\n// intersect account and paymaster ranges.\\r\\n    function _intersectTimeRange(uint256 validationData, uint256 paymasterValidationData) pure returns (ValidationData memory) {\\r\\n        ValidationData memory accountValidationData = _parseValidationData(validationData);\\r\\n        ValidationData memory pmValidationData = _parseValidationData(paymasterValidationData);\\r\\n        address aggregator = accountValidationData.aggregator;\\r\\n        if (aggregator == address(0)) {\\r\\n            aggregator = pmValidationData.aggregator;\\r\\n        }\\r\\n        uint48 validAfter = accountValidationData.validAfter;\\r\\n        uint48 validUntil = accountValidationData.validUntil;\\r\\n        uint48 pmValidAfter = pmValidationData.validAfter;\\r\\n        uint48 pmValidUntil = pmValidationData.validUntil;\\r\\n\\r\\n        if (validAfter < pmValidAfter) validAfter = pmValidAfter;\\r\\n        if (validUntil > pmValidUntil) validUntil = pmValidUntil;\\r\\n        return ValidationData(aggregator, validAfter, validUntil);\\r\\n    }\\r\\n\\r\\n/**\\r\\n * helper to pack the return value for validateUserOp\\r\\n * @param data - the ValidationData to pack\\r\\n */\\r\\n    function _packValidationData(ValidationData memory data) pure returns (uint256) {\\r\\n        return uint160(data.aggregator) | (uint256(data.validUntil) << 160) | (uint256(data.validAfter) << (160 + 48));\\r\\n    }\\r\\n\\r\\n/**\\r\\n * helper to pack the return value for validateUserOp, when not using an aggregator\\r\\n * @param sigFailed - true for signature failure, false for success\\r\\n * @param validUntil last timestamp this UserOperation is valid (or zero for infinite)\\r\\n * @param validAfter first timestamp this UserOperation is valid\\r\\n */\\r\\n    function _packValidationData(bool sigFailed, uint48 validUntil, uint48 validAfter) pure returns (uint256) {\\r\\n        return (sigFailed ? 1 : 0) | (uint256(validUntil) << 160) | (uint256(validAfter) << (160 + 48));\\r\\n    }\\r\\n\\r\\n/**\\r\\n * keccak function over calldata.\\r\\n * @dev copy calldata into memory, do keccak and drop allocated memory. Strangely, this is more efficient than letting solidity do it.\\r\\n */\\r\\n    function calldataKeccak(bytes calldata data) pure returns (bytes32 ret) {\\r\\n        assembly {\\r\\n            let mem := mload(0x40)\\r\\n            let len := data.length\\r\\n            calldatacopy(mem, data.offset, len)\\r\\n            ret := keccak256(mem, len)\\r\\n        }\\r\\n    }\\r\\n\\r\\n\",\"keccak256\":\"0xd0e3f0ed1a540a380fab5dda8aeafcace263802e60095deec17cc96dd1590743\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IAccount.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8.12;\\r\\n\\r\\nimport \\\"./UserOperation.sol\\\";\\r\\n\\r\\ninterface IAccount {\\r\\n\\r\\n    /**\\r\\n     * Validate user's signature and nonce\\r\\n     * the entryPoint will make the call to the recipient only if this validation call returns successfully.\\r\\n     * signature failure should be reported by returning SIG_VALIDATION_FAILED (1).\\r\\n     * This allows making a \\\"simulation call\\\" without a valid signature\\r\\n     * Other failures (e.g. nonce mismatch, or invalid signature format) should still revert to signal failure.\\r\\n     *\\r\\n     * @dev Must validate caller is the entryPoint.\\r\\n     *      Must validate the signature and nonce\\r\\n     * @param userOp the operation that is about to be executed.\\r\\n     * @param userOpHash hash of the user's request data. can be used as the basis for signature.\\r\\n     * @param missingAccountFunds missing funds on the account's deposit in the entrypoint.\\r\\n     *      This is the minimum amount to transfer to the sender(entryPoint) to be able to make the call.\\r\\n     *      The excess is left as a deposit in the entrypoint, for future calls.\\r\\n     *      can be withdrawn anytime using \\\"entryPoint.withdrawTo()\\\"\\r\\n     *      In case there is a paymaster in the request (or the current deposit is high enough), this value will be zero.\\r\\n     * @return validationData packaged ValidationData structure. use `_packValidationData` and `_unpackValidationData` to encode and decode\\r\\n     *      <20-byte> sigAuthorizer - 0 for valid signature, 1 to mark signature failure,\\r\\n     *         otherwise, an address of an \\\"authorizer\\\" contract.\\r\\n     *      <6-byte> validUntil - last timestamp this operation is valid. 0 for \\\"indefinite\\\"\\r\\n     *      <6-byte> validAfter - first timestamp this operation is valid\\r\\n     *      If an account doesn't use time-range, it is enough to return SIG_VALIDATION_FAILED value (1) for signature failure.\\r\\n     *      Note that the validation code cannot use block.timestamp (or block.number) directly.\\r\\n     */\\r\\n    function validateUserOp(UserOperation calldata userOp, bytes32 userOpHash, uint256 missingAccountFunds)\\r\\n    external returns (uint256 validationData);\\r\\n}\\r\\n\",\"keccak256\":\"0x3dc911b985542365d3e321c86dd144ea20f9fde8662d8bdfc1c2dc778750c74b\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IGuardian.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8.12;\\r\\n\\r\\ninterface IGuardian {\\r\\n    // The guardian relationship of the storage account\\r\\n    struct GuardianConfig {\\r\\n        address[] guardians;\\r\\n        uint256 approveThreshold;\\r\\n        uint256 delay;\\r\\n    }\\r\\n\\r\\n    event Register(address indexed account, address indexed guardian);\\r\\n\\r\\n    event Approved(\\r\\n        address indexed account,\\r\\n        address indexed guardian,\\r\\n        address newOwner\\r\\n    );\\r\\n\\r\\n    event ChangeGuardianConfig(\\r\\n        address indexed account,\\r\\n        address[] guardians,\\r\\n        uint256 approveThreshold,\\r\\n        uint256 delayBlock\\r\\n    );\\r\\n\\r\\n    function setConfig(\\r\\n        address account,\\r\\n        IGuardian.GuardianConfig memory config\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xc36fe615f4b5e4e4d9033790e0abede62a2a13d53a8ba1a4df341226e75b4957\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/ITSPAccount.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8.12;\\r\\n\\r\\ninterface ITSPAccount {\\r\\n    event ResetOwner(\\r\\n        address indexed account,\\r\\n        address oldOwner,\\r\\n        address newOwner\\r\\n    );\\r\\n\\r\\n    function resetOwner(address newAddress) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xa22d21f8a3712bf49261cbac6e6d5c1705a65e77ddbb22f3c9ed6dc80e87a377\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/UserOperation.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8.12;\\r\\n\\r\\n/* solhint-disable no-inline-assembly */\\r\\n\\r\\nimport {calldataKeccak} from \\\"../core/Helpers.sol\\\";\\r\\n\\r\\n/**\\r\\n * User Operation struct\\r\\n * @param sender the sender account of this request.\\r\\n     * @param nonce unique value the sender uses to verify it is not a replay.\\r\\n     * @param initCode if set, the account contract will be created by this constructor/\\r\\n     * @param callData the method call to execute on this account.\\r\\n     * @param callGasLimit the gas limit passed to the callData method call.\\r\\n     * @param verificationGasLimit gas used for validateUserOp and validatePaymasterUserOp.\\r\\n     * @param preVerificationGas gas not calculated by the handleOps method, but added to the gas paid. Covers batch overhead.\\r\\n     * @param maxFeePerGas same as EIP-1559 gas parameter.\\r\\n     * @param maxPriorityFeePerGas same as EIP-1559 gas parameter.\\r\\n     * @param paymasterAndData if set, this field holds the paymaster address and paymaster-specific data. the paymaster will pay for the transaction instead of the sender.\\r\\n     * @param signature sender-verified signature over the entire request, the EntryPoint address and the chain ID.\\r\\n     */\\r\\n    struct UserOperation {\\r\\n\\r\\n        address sender;\\r\\n        uint256 nonce;\\r\\n        bytes initCode;\\r\\n        bytes callData;\\r\\n        uint256 callGasLimit;\\r\\n        uint256 verificationGasLimit;\\r\\n        uint256 preVerificationGas;\\r\\n        uint256 maxFeePerGas;\\r\\n        uint256 maxPriorityFeePerGas;\\r\\n        bytes paymasterAndData;\\r\\n        bytes signature;\\r\\n    }\\r\\n\\r\\n/**\\r\\n * Utility functions helpful when working with UserOperation structs.\\r\\n */\\r\\nlibrary UserOperationLib {\\r\\n\\r\\n    function getSender(UserOperation calldata userOp) internal pure returns (address) {\\r\\n        address data;\\r\\n        //read sender from userOp, which is first userOp member (saves 800 gas...)\\r\\n        assembly {data := calldataload(userOp)}\\r\\n        return address(uint160(data));\\r\\n    }\\r\\n\\r\\n    //relayer/block builder might submit the TX with higher priorityFee, but the user should not\\r\\n    // pay above what he signed for.\\r\\n    function gasPrice(UserOperation calldata userOp) internal view returns (uint256) {\\r\\n    unchecked {\\r\\n        uint256 maxFeePerGas = userOp.maxFeePerGas;\\r\\n        uint256 maxPriorityFeePerGas = userOp.maxPriorityFeePerGas;\\r\\n        if (maxFeePerGas == maxPriorityFeePerGas) {\\r\\n            //legacy mode (for networks that don't support basefee opcode)\\r\\n            return maxFeePerGas;\\r\\n        }\\r\\n        return min(maxFeePerGas, maxPriorityFeePerGas + block.basefee);\\r\\n    }\\r\\n    }\\r\\n\\r\\n    function pack(UserOperation calldata userOp) internal pure returns (bytes memory ret) {\\r\\n        address sender = getSender(userOp);\\r\\n        uint256 nonce = userOp.nonce;\\r\\n        bytes32 hashInitCode = calldataKeccak(userOp.initCode);\\r\\n        bytes32 hashCallData = calldataKeccak(userOp.callData);\\r\\n        uint256 callGasLimit = userOp.callGasLimit;\\r\\n        uint256 verificationGasLimit = userOp.verificationGasLimit;\\r\\n        uint256 preVerificationGas = userOp.preVerificationGas;\\r\\n        uint256 maxFeePerGas = userOp.maxFeePerGas;\\r\\n        uint256 maxPriorityFeePerGas = userOp.maxPriorityFeePerGas;\\r\\n        bytes32 hashPaymasterAndData = calldataKeccak(userOp.paymasterAndData);\\r\\n\\r\\n        return abi.encode(\\r\\n            sender, nonce,\\r\\n            hashInitCode, hashCallData,\\r\\n            callGasLimit, verificationGasLimit, preVerificationGas,\\r\\n            maxFeePerGas, maxPriorityFeePerGas,\\r\\n            hashPaymasterAndData\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function hash(UserOperation calldata userOp) internal pure returns (bytes32) {\\r\\n        return keccak256(pack(userOp));\\r\\n    }\\r\\n\\r\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a < b ? a : b;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x1487b6ac6d5bb83af209fa1f272f0952d80e5789485946e2f2718bcc4c190f6d\",\"license\":\"GPL-3.0\"},\"contracts/samples/Guardian.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8.12;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\n\\r\\nimport \\\"../interfaces/IAccount.sol\\\";\\r\\nimport \\\"../interfaces/ITSPAccount.sol\\\";\\r\\nimport \\\"../interfaces/IGuardian.sol\\\";\\r\\n\\r\\ncontract Guardian is IGuardian {\\r\\n    using SafeMath for uint256;\\r\\n    // address public owner;\\r\\n    mapping(address => IGuardian.GuardianConfig) private _cabinet;\\r\\n    mapping(address => mapping(address => address)) private _approvesProgress;\\r\\n    mapping(address => uint256) public closestReset;\\r\\n\\r\\n    function setConfig(\\r\\n        address account,\\r\\n        IGuardian.GuardianConfig memory config\\r\\n    ) public {\\r\\n        _requireAccountOwner(account);\\r\\n        // Check the legality of the configuration\\r\\n        require(\\r\\n            config.approveThreshold > 0 && config.approveThreshold <= config.guardians.length,\\r\\n            \\\"The threshold must be greater than 0 and less than or equal to the number of guardians\\\"\\r\\n        );\\r\\n        require(config.guardians.length <= 5, \\\"Up to 5 guardians\\\");\\r\\n        require(\\r\\n            config.delay > 0,\\r\\n            \\\"The number of delayed verification blocks must be greater than or equal to 1\\\"\\r\\n        );\\r\\n        _cabinet[account] = config;\\r\\n        emit ChangeGuardianConfig(\\r\\n            account,\\r\\n            _cabinet[account].guardians,\\r\\n            _cabinet[account].approveThreshold,\\r\\n            _cabinet[account].delay\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // Owner authorized to modify the wallet\\r\\n    function approve(address account, address newAddress) public {\\r\\n        // Whether the verification is the guardian of the current account\\r\\n        require(newAddress != address(0), \\\"The new owner cannot be a zero address\\\");\\r\\n        require(\\r\\n            isAddressInArray(_cabinet[account].guardians, msg.sender),\\r\\n            \\\"you are not a guardian\\\"\\r\\n        );\\r\\n        IGuardian.GuardianConfig memory config = _cabinet[account];\\r\\n        for (uint256 i = 0; i < config.guardians.length; i++) {\\r\\n            address guardian = config.guardians[i];\\r\\n            address otherGuardianAddress = _approvesProgress[account][guardian];\\r\\n            // Check the guardian to assist in the designated EOA consistent\\r\\n            if (\\r\\n                otherGuardianAddress != address(0) &&\\r\\n                otherGuardianAddress != newAddress\\r\\n            ) {\\r\\n                // Remove other addresses that are inconsistent with the current guardian\\r\\n                delete _approvesProgress[account][guardian];\\r\\n            }\\r\\n        }\\r\\n        _approvesProgress[account][msg.sender] = newAddress;\\r\\n        closestReset[account] = block.timestamp + _cabinet[account].delay;\\r\\n        emit Approved(account, msg.sender, newAddress);\\r\\n    }\\r\\n\\r\\n    function resetAccountOwner(address account) public {\\r\\n        (address newAddress, uint256 progress) = _getApproveProgress(account);\\r\\n        if (progress >= _cabinet[account].approveThreshold) {\\r\\n            if (closestReset[account] > block.timestamp) {\\r\\n                revert(\\\"the delay reset time has not yet reached\\\");\\r\\n            }\\r\\n            delete closestReset[account];\\r\\n            _resetAccountOwner(account, newAddress);\\r\\n        } else {\\r\\n            revert(\\\"the threshold value has not been reached\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _resetAccountOwner(address account, address newAddress) private {\\r\\n        ITSPAccount(account).resetOwner(newAddress);\\r\\n        // Clear authorization record\\r\\n        _clearApproves(account);\\r\\n    }\\r\\n\\r\\n    function clearApproves(address account) public {\\r\\n        _requireAccountOwner(account);\\r\\n        delete closestReset[account];\\r\\n        _clearApproves(account);\\r\\n    }\\r\\n\\r\\n    function _clearApproves(address account) private {\\r\\n        IGuardian.GuardianConfig memory config = _cabinet[account];\\r\\n        for (uint256 i = 0; i < config.guardians.length; i++) {\\r\\n            address guardian = config.guardians[i];\\r\\n            if (_approvesProgress[account][guardian] != address(0)) {\\r\\n                delete _approvesProgress[account][guardian];\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getApproveProgress(\\r\\n        address account\\r\\n    ) public view returns (address newAddress, uint256 progress) {\\r\\n        return _getApproveProgress(account);\\r\\n    }\\r\\n\\r\\n    function _getApproveProgress(\\r\\n        address account\\r\\n    ) private view returns (address first, uint256 progress) {\\r\\n        IGuardian.GuardianConfig memory config = _cabinet[account];\\r\\n\\r\\n        uint256 n = 0;\\r\\n        for (uint256 i = 0; i < config.guardians.length; i++) {\\r\\n            address guardian = config.guardians[i];\\r\\n            address addr = _approvesProgress[account][guardian];\\r\\n            // Check the guardian to assist in the designated EOA consistent\\r\\n            if (first == address(0) && addr != address(0)) {\\r\\n                first = addr;\\r\\n            }\\r\\n            if (addr != address(0) && addr == first) {\\r\\n                n += 1;\\r\\n            }\\r\\n        }\\r\\n        return (first, n);\\r\\n    }\\r\\n\\r\\n    function isAddressInArray(\\r\\n        address[] memory addresses,\\r\\n        address target\\r\\n    ) public pure returns (bool) {\\r\\n        for (uint256 i = 0; i < addresses.length; i++) {\\r\\n            if (addresses[i] == target) {\\r\\n                return true;\\r\\n            }\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    // Require the function call went through EntryPoint or owner\\r\\n    function _requireAccountOwner(address account) internal view {\\r\\n        require(\\r\\n            msg.sender == account ||\\r\\n                msg.sender == Ownable(payable(account)).owner(),\\r\\n            \\\"account: not the account owner\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function getGuardianConfig(\\r\\n        address account\\r\\n    ) public view returns (IGuardian.GuardianConfig memory config) {\\r\\n        return _cabinet[account];\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xace6def122f59c8a17c2edab2fd82dcece42c42a84f670e3bf3b41a8f8488386\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b506115ca806100206000396000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063a7d026401161005b578063a7d026401461011d578063d1f9445414610130578063d68135d614610143578063dfa17ab81461016657600080fd5b80630bb6094a1461008d5780631a9da37b146100b65780637e5465ba146100f55780638895eeb41461010a575b600080fd5b6100a061009b3660046111a1565b610194565b6040516100ad91906111c5565b60405180910390f35b6100c96100c43660046111a1565b610268565b6040805173ffffffffffffffffffffffffffffffffffffffff90931683526020830191909152016100ad565b610108610103366004611241565b61027d565b005b6101086101183660046111a1565b6106b8565b61010861012b3660046111a1565b61086a565b61010861013e36600461136b565b6108a5565b610156610151366004611417565b610b61565b60405190151581526020016100ad565b6101866101743660046111a1565b60026020526000908152604090205481565b6040519081526020016100ad565b6101b860405180606001604052806060815260200160008152602001600081525090565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260208181526040918290208251815460809381028201840190945260608101848152909391928492849184018282801561024457602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311610219575b50505050508152602001600182015481526020016002820154815250509050919050565b60008061027483610be2565b91509150915091565b73ffffffffffffffffffffffffffffffffffffffff8116610325576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f546865206e6577206f776e65722063616e6e6f742062652061207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff82166000908152602081815260409182902080548351818402810184019094528084526103b393928301828280156103a857602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff16815260019091019060200180831161037d575b505050505033610b61565b610419576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f796f7520617265206e6f74206120677561726469616e00000000000000000000604482015260640161031c565b73ffffffffffffffffffffffffffffffffffffffff821660009081526020818152604080832081518154608094810282018501909352606081018381529093919284928491908401828280156104a557602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff16815260019091019060200180831161047a575b5050505050815260200160018201548152602001600282015481525050905060005b8151518110156105da576000826000015182815181106104e9576104e961145e565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff80881660009081526001845260408082208385168352909452929092205490925016801580159061056757508473ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b156105c55773ffffffffffffffffffffffffffffffffffffffff808716600090815260016020908152604080832093861683529290522080547fffffffffffffffffffffffff00000000000000000000000000000000000000001690555b505080806105d2906114bc565b9150506104c7565b5073ffffffffffffffffffffffffffffffffffffffff8381166000818152600160209081526040808320338452825280832080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169588169590951790945591815290819052206002015461065090426114f4565b73ffffffffffffffffffffffffffffffffffffffff84811660008181526002602090815260409182902094909455519185168252339290917f64bdc57a1d7fc474b76b6e1fa7a6bebdab2700e6da97a0134c0937672eabd2a0910160405180910390a3505050565b6000806106c483610be2565b73ffffffffffffffffffffffffffffffffffffffff8516600090815260208190526040902060010154919350915081106107e25773ffffffffffffffffffffffffffffffffffffffff83166000908152600260205260409020544210156107ad576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f7468652064656c61792072657365742074696d6520686173206e6f742079657460448201527f2072656163686564000000000000000000000000000000000000000000000000606482015260840161031c565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600260205260408120556107dd8383610dab565b505050565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f746865207468726573686f6c642076616c756520686173206e6f74206265656e60448201527f2072656163686564000000000000000000000000000000000000000000000000606482015260840161031c565b61087381610e39565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600260205260408120556108a281610f5c565b50565b6108ae82610e39565b600081602001511180156108c85750805151602082015111155b61097a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152605660248201527f546865207468726573686f6c64206d757374206265206772656174657220746860448201527f616e203020616e64206c657373207468616e206f7220657175616c20746f207460648201527f6865206e756d626572206f6620677561726469616e7300000000000000000000608482015260a40161031c565b805151600510156109e7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f557020746f203520677561726469616e73000000000000000000000000000000604482015260640161031c565b6000816040015111610aa1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604c60248201527f546865206e756d626572206f662064656c61796564207665726966696361746960448201527f6f6e20626c6f636b73206d7573742062652067726561746572207468616e206f60648201527f7220657175616c20746f20310000000000000000000000000000000000000000608482015260a40161031c565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260208181526040909120825180518493610adb9284929101906110e0565b5060208281015160018084019190915560409384015160029384015573ffffffffffffffffffffffffffffffffffffffff8616600081815292839052918490209081015492810154935191937f50a3a7b086c8dd17e483488070fd8b3249405396f04875f9fcc2a8b459da63a893610b559390919061150c565b60405180910390a25050565b6000805b8351811015610bd6578273ffffffffffffffffffffffffffffffffffffffff16848281518110610b9757610b9761145e565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1603610bc4576001915050610bdc565b80610bce816114bc565b915050610b65565b50600090505b92915050565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260208181526040808320815181546080948102820185019093526060810183815285948594929392849291849190840182828015610c7257602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311610c47575b505050505081526020016001820154815260200160028201548152505090506000805b825151811015610da157600083600001518281518110610cb757610cb761145e565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff808a166000908152600184526040808220838516835290945292909220549092508116908716158015610d20575073ffffffffffffffffffffffffffffffffffffffff811615155b15610d29578096505b73ffffffffffffffffffffffffffffffffffffffff811615801590610d7957508673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b15610d8c57610d896001856114f4565b93505b50508080610d99906114bc565b915050610c95565b5092949293505050565b6040517f73cc802a00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301528316906373cc802a90602401600060405180830381600087803b158015610e1457600080fd5b505af1158015610e28573d6000803e3d6000fd5b50505050610e3582610f5c565b5050565b3373ffffffffffffffffffffffffffffffffffffffff82161480610ef657508073ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ea3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec79190611577565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b6108a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f6163636f756e743a206e6f7420746865206163636f756e74206f776e65720000604482015260640161031c565b73ffffffffffffffffffffffffffffffffffffffff81166000908152602081815260408083208151815460809481028201850190935260608101838152909391928492849190840182828015610fe857602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311610fbd575b5050505050815260200160018201548152602001600282015481525050905060005b8151518110156107dd5760008260000151828151811061102c5761102c61145e565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff86811660009081526001845260408082208385168352909452929092205490925016156110cd5773ffffffffffffffffffffffffffffffffffffffff808516600090815260016020908152604080832093851683529290522080547fffffffffffffffffffffffff00000000000000000000000000000000000000001690555b50806110d8816114bc565b91505061100a565b82805482825590600052602060002090810192821561115a579160200282015b8281111561115a57825182547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909116178255602090920191600190910190611100565b5061116692915061116a565b5090565b5b80821115611166576000815560010161116b565b73ffffffffffffffffffffffffffffffffffffffff811681146108a257600080fd5b6000602082840312156111b357600080fd5b81356111be8161117f565b9392505050565b6020808252825160608383015280516080840181905260009291820190839060a08601905b8083101561122057835173ffffffffffffffffffffffffffffffffffffffff1682529284019260019290920191908401906111ea565b50838701516040870152604087015160608701528094505050505092915050565b6000806040838503121561125457600080fd5b823561125f8161117f565b9150602083013561126f8161117f565b809150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082601f8301126112ba57600080fd5b8135602067ffffffffffffffff808311156112d7576112d761127a565b8260051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f8301168101818110848211171561131a5761131a61127a565b60405293845285810183019383810192508785111561133857600080fd5b83870191505b848210156113605781356113518161117f565b8352918301919083019061133e565b979650505050505050565b6000806040838503121561137e57600080fd5b82356113898161117f565b9150602083013567ffffffffffffffff808211156113a657600080fd5b90840190606082870312156113ba57600080fd5b6040516060810181811083821117156113d5576113d561127a565b6040528235828111156113e757600080fd5b6113f3888286016112a9565b82525060208301356020820152604083013560408201528093505050509250929050565b6000806040838503121561142a57600080fd5b823567ffffffffffffffff81111561144157600080fd5b61144d858286016112a9565b925050602083013561126f8161117f565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036114ed576114ed61148d565b5060010190565b600082198211156115075761150761148d565b500190565b6000606082016060835280865480835260808501915087600052602092508260002060005b8281101561156357815473ffffffffffffffffffffffffffffffffffffffff1684529284019260019182019101611531565b505050908301949094525060400152919050565b60006020828403121561158957600080fd5b81516111be8161117f56fea26469706673582212207b05f02c7a46a7686eeb05d3468c745856fa93bc21056e794b9fc8f5093e14e564736f6c634300080f0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c8063a7d026401161005b578063a7d026401461011d578063d1f9445414610130578063d68135d614610143578063dfa17ab81461016657600080fd5b80630bb6094a1461008d5780631a9da37b146100b65780637e5465ba146100f55780638895eeb41461010a575b600080fd5b6100a061009b3660046111a1565b610194565b6040516100ad91906111c5565b60405180910390f35b6100c96100c43660046111a1565b610268565b6040805173ffffffffffffffffffffffffffffffffffffffff90931683526020830191909152016100ad565b610108610103366004611241565b61027d565b005b6101086101183660046111a1565b6106b8565b61010861012b3660046111a1565b61086a565b61010861013e36600461136b565b6108a5565b610156610151366004611417565b610b61565b60405190151581526020016100ad565b6101866101743660046111a1565b60026020526000908152604090205481565b6040519081526020016100ad565b6101b860405180606001604052806060815260200160008152602001600081525090565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260208181526040918290208251815460809381028201840190945260608101848152909391928492849184018282801561024457602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311610219575b50505050508152602001600182015481526020016002820154815250509050919050565b60008061027483610be2565b91509150915091565b73ffffffffffffffffffffffffffffffffffffffff8116610325576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f546865206e6577206f776e65722063616e6e6f742062652061207a65726f206160448201527f646472657373000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff82166000908152602081815260409182902080548351818402810184019094528084526103b393928301828280156103a857602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff16815260019091019060200180831161037d575b505050505033610b61565b610419576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f796f7520617265206e6f74206120677561726469616e00000000000000000000604482015260640161031c565b73ffffffffffffffffffffffffffffffffffffffff821660009081526020818152604080832081518154608094810282018501909352606081018381529093919284928491908401828280156104a557602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff16815260019091019060200180831161047a575b5050505050815260200160018201548152602001600282015481525050905060005b8151518110156105da576000826000015182815181106104e9576104e961145e565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff80881660009081526001845260408082208385168352909452929092205490925016801580159061056757508473ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614155b156105c55773ffffffffffffffffffffffffffffffffffffffff808716600090815260016020908152604080832093861683529290522080547fffffffffffffffffffffffff00000000000000000000000000000000000000001690555b505080806105d2906114bc565b9150506104c7565b5073ffffffffffffffffffffffffffffffffffffffff8381166000818152600160209081526040808320338452825280832080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169588169590951790945591815290819052206002015461065090426114f4565b73ffffffffffffffffffffffffffffffffffffffff84811660008181526002602090815260409182902094909455519185168252339290917f64bdc57a1d7fc474b76b6e1fa7a6bebdab2700e6da97a0134c0937672eabd2a0910160405180910390a3505050565b6000806106c483610be2565b73ffffffffffffffffffffffffffffffffffffffff8516600090815260208190526040902060010154919350915081106107e25773ffffffffffffffffffffffffffffffffffffffff83166000908152600260205260409020544210156107ad576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f7468652064656c61792072657365742074696d6520686173206e6f742079657460448201527f2072656163686564000000000000000000000000000000000000000000000000606482015260840161031c565b73ffffffffffffffffffffffffffffffffffffffff83166000908152600260205260408120556107dd8383610dab565b505050565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602860248201527f746865207468726573686f6c642076616c756520686173206e6f74206265656e60448201527f2072656163686564000000000000000000000000000000000000000000000000606482015260840161031c565b61087381610e39565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600260205260408120556108a281610f5c565b50565b6108ae82610e39565b600081602001511180156108c85750805151602082015111155b61097a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152605660248201527f546865207468726573686f6c64206d757374206265206772656174657220746860448201527f616e203020616e64206c657373207468616e206f7220657175616c20746f207460648201527f6865206e756d626572206f6620677561726469616e7300000000000000000000608482015260a40161031c565b805151600510156109e7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f557020746f203520677561726469616e73000000000000000000000000000000604482015260640161031c565b6000816040015111610aa1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152604c60248201527f546865206e756d626572206f662064656c61796564207665726966696361746960448201527f6f6e20626c6f636b73206d7573742062652067726561746572207468616e206f60648201527f7220657175616c20746f20310000000000000000000000000000000000000000608482015260a40161031c565b73ffffffffffffffffffffffffffffffffffffffff8216600090815260208181526040909120825180518493610adb9284929101906110e0565b5060208281015160018084019190915560409384015160029384015573ffffffffffffffffffffffffffffffffffffffff8616600081815292839052918490209081015492810154935191937f50a3a7b086c8dd17e483488070fd8b3249405396f04875f9fcc2a8b459da63a893610b559390919061150c565b60405180910390a25050565b6000805b8351811015610bd6578273ffffffffffffffffffffffffffffffffffffffff16848281518110610b9757610b9761145e565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1603610bc4576001915050610bdc565b80610bce816114bc565b915050610b65565b50600090505b92915050565b73ffffffffffffffffffffffffffffffffffffffff8116600090815260208181526040808320815181546080948102820185019093526060810183815285948594929392849291849190840182828015610c7257602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311610c47575b505050505081526020016001820154815260200160028201548152505090506000805b825151811015610da157600083600001518281518110610cb757610cb761145e565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff808a166000908152600184526040808220838516835290945292909220549092508116908716158015610d20575073ffffffffffffffffffffffffffffffffffffffff811615155b15610d29578096505b73ffffffffffffffffffffffffffffffffffffffff811615801590610d7957508673ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16145b15610d8c57610d896001856114f4565b93505b50508080610d99906114bc565b915050610c95565b5092949293505050565b6040517f73cc802a00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff82811660048301528316906373cc802a90602401600060405180830381600087803b158015610e1457600080fd5b505af1158015610e28573d6000803e3d6000fd5b50505050610e3582610f5c565b5050565b3373ffffffffffffffffffffffffffffffffffffffff82161480610ef657508073ffffffffffffffffffffffffffffffffffffffff16638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610ea3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ec79190611577565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16145b6108a2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f6163636f756e743a206e6f7420746865206163636f756e74206f776e65720000604482015260640161031c565b73ffffffffffffffffffffffffffffffffffffffff81166000908152602081815260408083208151815460809481028201850190935260608101838152909391928492849190840182828015610fe857602002820191906000526020600020905b815473ffffffffffffffffffffffffffffffffffffffff168152600190910190602001808311610fbd575b5050505050815260200160018201548152602001600282015481525050905060005b8151518110156107dd5760008260000151828151811061102c5761102c61145e565b60209081029190910181015173ffffffffffffffffffffffffffffffffffffffff86811660009081526001845260408082208385168352909452929092205490925016156110cd5773ffffffffffffffffffffffffffffffffffffffff808516600090815260016020908152604080832093851683529290522080547fffffffffffffffffffffffff00000000000000000000000000000000000000001690555b50806110d8816114bc565b91505061100a565b82805482825590600052602060002090810192821561115a579160200282015b8281111561115a57825182547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff909116178255602090920191600190910190611100565b5061116692915061116a565b5090565b5b80821115611166576000815560010161116b565b73ffffffffffffffffffffffffffffffffffffffff811681146108a257600080fd5b6000602082840312156111b357600080fd5b81356111be8161117f565b9392505050565b6020808252825160608383015280516080840181905260009291820190839060a08601905b8083101561122057835173ffffffffffffffffffffffffffffffffffffffff1682529284019260019290920191908401906111ea565b50838701516040870152604087015160608701528094505050505092915050565b6000806040838503121561125457600080fd5b823561125f8161117f565b9150602083013561126f8161117f565b809150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082601f8301126112ba57600080fd5b8135602067ffffffffffffffff808311156112d7576112d761127a565b8260051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f8301168101818110848211171561131a5761131a61127a565b60405293845285810183019383810192508785111561133857600080fd5b83870191505b848210156113605781356113518161117f565b8352918301919083019061133e565b979650505050505050565b6000806040838503121561137e57600080fd5b82356113898161117f565b9150602083013567ffffffffffffffff808211156113a657600080fd5b90840190606082870312156113ba57600080fd5b6040516060810181811083821117156113d5576113d561127a565b6040528235828111156113e757600080fd5b6113f3888286016112a9565b82525060208301356020820152604083013560408201528093505050509250929050565b6000806040838503121561142a57600080fd5b823567ffffffffffffffff81111561144157600080fd5b61144d858286016112a9565b925050602083013561126f8161117f565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036114ed576114ed61148d565b5060010190565b600082198211156115075761150761148d565b500190565b6000606082016060835280865480835260808501915087600052602092508260002060005b8281101561156357815473ffffffffffffffffffffffffffffffffffffffff1684529284019260019182019101611531565b505050908301949094525060400152919050565b60006020828403121561158957600080fd5b81516111be8161117f56fea26469706673582212207b05f02c7a46a7686eeb05d3468c745856fa93bc21056e794b9fc8f5093e14e564736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4156,
        "contract": "contracts/samples/Guardian.sol:Guardian",
        "label": "_cabinet",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_struct(GuardianConfig)3766_storage)"
      },
      {
        "astId": 4162,
        "contract": "contracts/samples/Guardian.sol:Guardian",
        "label": "_approvesProgress",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_address))"
      },
      {
        "astId": 4166,
        "contract": "contracts/samples/Guardian.sol:Guardian",
        "label": "closestReset",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_address)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_address,t_mapping(t_address,t_address))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => address))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_address)"
      },
      "t_mapping(t_address,t_struct(GuardianConfig)3766_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct IGuardian.GuardianConfig)",
        "numberOfBytes": "32",
        "value": "t_struct(GuardianConfig)3766_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(GuardianConfig)3766_storage": {
        "encoding": "inplace",
        "label": "struct IGuardian.GuardianConfig",
        "members": [
          {
            "astId": 3761,
            "contract": "contracts/samples/Guardian.sol:Guardian",
            "label": "guardians",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_address)dyn_storage"
          },
          {
            "astId": 3763,
            "contract": "contracts/samples/Guardian.sol:Guardian",
            "label": "approveThreshold",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 3765,
            "contract": "contracts/samples/Guardian.sol:Guardian",
            "label": "delay",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}