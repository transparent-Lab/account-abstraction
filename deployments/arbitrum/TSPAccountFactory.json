{
  "address": "0xdCAF2C4e87c5ec76F8e1BBF07B21baCb9F3022F3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IEntryPoint",
          "name": "_entryPoint",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "accountImplementation",
      "outputs": [
        {
          "internalType": "contract TSPAccount",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "salt",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "guardian",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "threshold",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "guardianDelay",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "guardians",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "inviter",
          "type": "address"
        }
      ],
      "name": "createAccount",
      "outputs": [
        {
          "internalType": "contract TSPAccount",
          "name": "ret",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "salt",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "guardian",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "threshold",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "guardianDelay",
          "type": "uint256"
        },
        {
          "internalType": "address[]",
          "name": "guardians",
          "type": "address[]"
        },
        {
          "internalType": "address",
          "name": "inviter",
          "type": "address"
        }
      ],
      "name": "getAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x46094b2827c02e57e90eaf51a6710f7acb9c40af091ad2e8f113fd478b14738b",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x37aC88732AEdC52AA93b17EA2BA6f6263B435889",
    "contractAddress": null,
    "transactionIndex": 1,
    "gasUsed": "16447845",
    "logsBloom": "0x
    "blockHash": "0x338c7603ee610b8762bd12a16d3ec36ed166acc2df9fe8cbe491d9a17f975fb0",
    "transactionHash": "0x46094b2827c02e57e90eaf51a6710f7acb9c40af091ad2e8f113fd478b14738b",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 119955933,
        "transactionHash": "0x46094b2827c02e57e90eaf51a6710f7acb9c40af091ad2e8f113fd478b14738b",
        "address": "0x99B04076bb83b46652B66B87ede907e92ca00583",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 0,
        "blockHash": "0x338c7603ee610b8762bd12a16d3ec36ed166acc2df9fe8cbe491d9a17f975fb0"
      }
    ],
    "blockNumber": 119955933,
    "cumulativeGasUsed": "16447845",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x48e60BBb664aEfAc9f14aDB42e5FB5b4a119EB66"
  ],
  "numDeployments": 6,
  "solcInputHash": "6e4a3abd12603b88b1f7ffb92b25eb8d",
  "metadata": "{\"compiler\":{\"version\":\"0.8.15+commit.e14f2714\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IEntryPoint\",\"name\":\"_entryPoint\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"accountImplementation\",\"outputs\":[{\"internalType\":\"contract TSPAccount\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"guardianDelay\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"guardians\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"inviter\",\"type\":\"address\"}],\"name\":\"createAccount\",\"outputs\":[{\"internalType\":\"contract TSPAccount\",\"name\":\"ret\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"salt\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"guardian\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"threshold\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"guardianDelay\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"guardians\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"inviter\",\"type\":\"address\"}],\"name\":\"getAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"createAccount(address,uint256,address,uint256,uint256,address[],address)\":{\"notice\":\"create an account, and return its address. returns the address even if the account is already deployed. Note that during UserOperation execution, this method is called only if the account is not deployed. This method returns an existing account address so that entryPoint.getSenderAddress() would work even after account creation\"},\"getAddress(address,uint256,address,uint256,uint256,address[],address)\":{\"notice\":\"calculate the counterfactual address of this account as it would be returned by createAccount()\"}},\"notice\":\"A sample factory contract for SimpleAccount A UserOperations \\\"initCode\\\" holds the address of the factory, and a method call (to createAccount, in this sample factory). The factory's createAccount returns the target account address even if it is already installed. This way, the entryPoint.getSenderAddress() can be called either before or after the account is created.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/samples/TSPAccountFactory.sol\":\"TSPAccountFactory\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":1000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xa94b34880e3c1b0b931662cb1c09e5dfa6662f31cba80e07c5ee71cd135c9673\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (proxy/ERC1967/ERC1967Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Proxy.sol\\\";\\nimport \\\"./ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev This contract implements an upgradeable proxy. It is upgradeable because calls are delegated to an\\n * implementation address that can be changed. This address is stored in storage in the location specified by\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967], so that it doesn't conflict with the storage layout of the\\n * implementation behind the proxy.\\n */\\ncontract ERC1967Proxy is Proxy, ERC1967Upgrade {\\n    /**\\n     * @dev Initializes the upgradeable proxy with an initial implementation specified by `_logic`.\\n     *\\n     * If `_data` is nonempty, it's used as data in a delegate call to `_logic`. This will typically be an encoded\\n     * function call, and allows initializing the storage of the proxy like a Solidity constructor.\\n     */\\n    constructor(address _logic, bytes memory _data) payable {\\n        _upgradeToAndCall(_logic, _data, false);\\n    }\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _implementation() internal view virtual override returns (address impl) {\\n        return ERC1967Upgrade._getImplementation();\\n    }\\n}\\n\",\"keccak256\":\"0xa2b22da3032e50b55f95ec1d13336102d675f341167aa76db571ef7f8bb7975d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xabf3f59bc0e5423eae45e459dbe92e7052c6983628d39008590edc852a62f94a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Proxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (proxy/Proxy.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\\n * be specified by overriding the virtual {_implementation} function.\\n *\\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\\n * different contract through the {_delegate} function.\\n *\\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\\n */\\nabstract contract Proxy {\\n    /**\\n     * @dev Delegates the current call to `implementation`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _delegate(address implementation) internal virtual {\\n        assembly {\\n            // Copy msg.data. We take full control of memory in this inline assembly\\n            // block because it will not return to Solidity code. We overwrite the\\n            // Solidity scratch pad at memory position 0.\\n            calldatacopy(0, 0, calldatasize())\\n\\n            // Call the implementation.\\n            // out and outsize are 0 because we don't know the size yet.\\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\\n\\n            // Copy the returned data.\\n            returndatacopy(0, 0, returndatasize())\\n\\n            switch result\\n            // delegatecall returns 0 on error.\\n            case 0 {\\n                revert(0, returndatasize())\\n            }\\n            default {\\n                return(0, returndatasize())\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback function\\n     * and {_fallback} should delegate.\\n     */\\n    function _implementation() internal view virtual returns (address);\\n\\n    /**\\n     * @dev Delegates the current call to the address returned by `_implementation()`.\\n     *\\n     * This function does not return to its internal call site, it will return directly to the external caller.\\n     */\\n    function _fallback() internal virtual {\\n        _beforeFallback();\\n        _delegate(_implementation());\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\\n     * function in the contract matches the call data.\\n     */\\n    fallback() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if call data\\n     * is empty.\\n     */\\n    receive() external payable virtual {\\n        _fallback();\\n    }\\n\\n    /**\\n     * @dev Hook that is called before falling back to the implementation. Can happen as part of a manual `_fallback`\\n     * call, or as part of the Solidity `fallback` or `receive` functions.\\n     *\\n     * If overridden should call `super._beforeFallback()`.\\n     */\\n    function _beforeFallback() internal virtual {}\\n}\\n\",\"keccak256\":\"0xc130fe33f1b2132158531a87734153293f6d07bc263ff4ac90e85da9c82c0e27\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/Address.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!Address.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initialized`\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Internal function that returns the initialized version. Returns `_initializing`\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0xcee5467d5d873fb75dae6f98c01a8d25dd609f9d0374c7d39217bd5f9539a2d6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../ERC1967/ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is IERC1822Proxiable, ERC1967Upgrade {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n}\\n\",\"keccak256\":\"0x85cc5aca68692044586dc5ca19a9868d3288f6b35d1085c620dd0278ed0abdaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC1155/IERC1155Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev _Available since v3.1._\\n */\\ninterface IERC1155Receiver is IERC165 {\\n    /**\\n     * @dev Handles the receipt of a single ERC1155 token type. This function is\\n     * called at the end of a `safeTransferFrom` after the balance has been updated.\\n     *\\n     * NOTE: To accept the transfer, this must return\\n     * `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))`\\n     * (i.e. 0xf23a6e61, or its own function selector).\\n     *\\n     * @param operator The address which initiated the transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param id The ID of the token being transferred\\n     * @param value The amount of tokens being transferred\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155Received(address,address,uint256,uint256,bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155Received(\\n        address operator,\\n        address from,\\n        uint256 id,\\n        uint256 value,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n\\n    /**\\n     * @dev Handles the receipt of a multiple ERC1155 token types. This function\\n     * is called at the end of a `safeBatchTransferFrom` after the balances have\\n     * been updated.\\n     *\\n     * NOTE: To accept the transfer(s), this must return\\n     * `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))`\\n     * (i.e. 0xbc197c81, or its own function selector).\\n     *\\n     * @param operator The address which initiated the batch transfer (i.e. msg.sender)\\n     * @param from The address which previously owned the token\\n     * @param ids An array containing ids of each token being transferred (order and length must match values array)\\n     * @param values An array containing amounts of each token being transferred (order and length must match ids array)\\n     * @param data Additional data with no specified format\\n     * @return `bytes4(keccak256(\\\"onERC1155BatchReceived(address,address,uint256[],uint256[],bytes)\\\"))` if transfer is allowed\\n     */\\n    function onERC1155BatchReceived(\\n        address operator,\\n        address from,\\n        uint256[] calldata ids,\\n        uint256[] calldata values,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xeb373f1fdc7b755c6a750123a9b9e3a8a02c1470042fd6505d875000a80bde0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xa82b58eca1ee256be466e536706850163d2ec7821945abd6b4778cfb3bee37da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC777/IERC777Recipient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC777/IERC777Recipient.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC777TokensRecipient standard as defined in the EIP.\\n *\\n * Accounts can be notified of {IERC777} tokens being sent to them by having a\\n * contract implement this interface (contract holders can be their own\\n * implementer) and registering it on the\\n * https://eips.ethereum.org/EIPS/eip-1820[ERC1820 global registry].\\n *\\n * See {IERC1820Registry} and {ERC1820Implementer}.\\n */\\ninterface IERC777Recipient {\\n    /**\\n     * @dev Called by an {IERC777} token contract whenever tokens are being\\n     * moved or created into a registered account (`to`). The type of operation\\n     * is conveyed by `from` being the zero address or not.\\n     *\\n     * This call occurs _after_ the token contract's state is updated, so\\n     * {IERC777-balanceOf}, etc., can be used to query the post-operation state.\\n     *\\n     * This function may revert to prevent the operation from being executed.\\n     */\\n    function tokensReceived(\\n        address operator,\\n        address from,\\n        address to,\\n        uint256 amount,\\n        bytes calldata userData,\\n        bytes calldata operatorData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x1a5d61db2733202ba361e6d6741cd2e662380e22b80e987eacfc91973f2267dc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Create2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Create2.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Helper to make usage of the `CREATE2` EVM opcode easier and safer.\\n * `CREATE2` can be used to compute in advance the address where a smart\\n * contract will be deployed, which allows for interesting new mechanisms known\\n * as 'counterfactual interactions'.\\n *\\n * See the https://eips.ethereum.org/EIPS/eip-1014#motivation[EIP] for more\\n * information.\\n */\\nlibrary Create2 {\\n    /**\\n     * @dev Deploys a contract using `CREATE2`. The address where the contract\\n     * will be deployed can be known in advance via {computeAddress}.\\n     *\\n     * The bytecode for a contract can be obtained from Solidity with\\n     * `type(contractName).creationCode`.\\n     *\\n     * Requirements:\\n     *\\n     * - `bytecode` must not be empty.\\n     * - `salt` must have not been used for `bytecode` already.\\n     * - the factory must have a balance of at least `amount`.\\n     * - if `amount` is non-zero, `bytecode` must have a `payable` constructor.\\n     */\\n    function deploy(\\n        uint256 amount,\\n        bytes32 salt,\\n        bytes memory bytecode\\n    ) internal returns (address addr) {\\n        require(address(this).balance >= amount, \\\"Create2: insufficient balance\\\");\\n        require(bytecode.length != 0, \\\"Create2: bytecode length is zero\\\");\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            addr := create2(amount, add(bytecode, 0x20), mload(bytecode), salt)\\n        }\\n        require(addr != address(0), \\\"Create2: Failed on deploy\\\");\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy}. Any change in the\\n     * `bytecodeHash` or `salt` will result in a new destination address.\\n     */\\n    function computeAddress(bytes32 salt, bytes32 bytecodeHash) internal view returns (address) {\\n        return computeAddress(salt, bytecodeHash, address(this));\\n    }\\n\\n    /**\\n     * @dev Returns the address where a contract will be stored if deployed via {deploy} from a contract located at\\n     * `deployer`. If `deployer` is this contract's address, returns the same value as {computeAddress}.\\n     */\\n    function computeAddress(\\n        bytes32 salt,\\n        bytes32 bytecodeHash,\\n        address deployer\\n    ) internal pure returns (address addr) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40) // Get free memory pointer\\n\\n            // |                   | \\u2193 ptr ...  \\u2193 ptr + 0x0B (start) ...  \\u2193 ptr + 0x20 ...  \\u2193 ptr + 0x40 ...   |\\n            // |-------------------|---------------------------------------------------------------------------|\\n            // | bytecodeHash      |                                                        CCCCCCCCCCCCC...CC |\\n            // | salt              |                                      BBBBBBBBBBBBB...BB                   |\\n            // | deployer          | 000000...0000AAAAAAAAAAAAAAAAAAA...AA                                     |\\n            // | 0xFF              |            FF                                                             |\\n            // |-------------------|---------------------------------------------------------------------------|\\n            // | memory            | 000000...00FFAAAAAAAAAAAAAAAAAAA...AABBBBBBBBBBBBB...BBCCCCCCCCCCCCC...CC |\\n            // | keccak(start, 85) |            \\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191\\u2191 |\\n\\n            mstore(add(ptr, 0x40), bytecodeHash)\\n            mstore(add(ptr, 0x20), salt)\\n            mstore(ptr, deployer) // Right-aligned with 12 preceding garbage bytes\\n            let start := add(ptr, 0x0b) // The hashed data starts at the final garbage byte which we will set to 0xff\\n            mstore8(start, 0xff)\\n            addr := keccak256(start, 85)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xafc07f37809f74d9c66d6461cc0f85fb5147ab855acd0acc30af4b2272130c61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV // Deprecated in v4.8\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s = vs & bytes32(0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff);\\n        uint8 v = uint8((uint256(vs) >> 255) + 27);\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xda898fa084aa1ddfdb346e6a40459e00a59d87071cce7c315a46d648dd71d0ba\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/core/BaseAccount.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8.12;\\r\\n\\r\\n/* solhint-disable avoid-low-level-calls */\\r\\n/* solhint-disable no-empty-blocks */\\r\\n\\r\\nimport \\\"../interfaces/IAccount.sol\\\";\\r\\nimport \\\"../interfaces/IEntryPoint.sol\\\";\\r\\nimport \\\"./Helpers.sol\\\";\\r\\n\\r\\n/**\\r\\n * Basic account implementation.\\r\\n * this contract provides the basic logic for implementing the IAccount interface  - validateUserOp\\r\\n * specific account implementation should inherit it and provide the account-specific logic\\r\\n */\\r\\nabstract contract BaseAccount is IAccount {\\r\\n    using UserOperationLib for UserOperation;\\r\\n\\r\\n    //return value in case of signature failure, with no time-range.\\r\\n    // equivalent to _packValidationData(true,0,0);\\r\\n    uint256 constant internal SIG_VALIDATION_FAILED = 1;\\r\\n\\r\\n    /**\\r\\n     * Return the account nonce.\\r\\n     * This method returns the next sequential nonce.\\r\\n     * For a nonce of a specific key, use `entrypoint.getNonce(account, key)`\\r\\n     */\\r\\n    function getNonce() public view virtual returns (uint256) {\\r\\n        return entryPoint().getNonce(address(this), 0);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * return the entryPoint used by this account.\\r\\n     * subclass should return the current entryPoint used by this account.\\r\\n     */\\r\\n    function entryPoint() public view virtual returns (IEntryPoint);\\r\\n\\r\\n    /**\\r\\n     * Validate user's signature and nonce.\\r\\n     * subclass doesn't need to override this method. Instead, it should override the specific internal validation methods.\\r\\n     */\\r\\n    function validateUserOp(UserOperation calldata userOp, bytes32 userOpHash, uint256 missingAccountFunds)\\r\\n    external override virtual returns (uint256 validationData) {\\r\\n        _requireFromEntryPoint();\\r\\n        validationData = _validateSignature(userOp, userOpHash);\\r\\n        _validateNonce(userOp.nonce);\\r\\n        _payPrefund(missingAccountFunds);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * ensure the request comes from the known entrypoint.\\r\\n     */\\r\\n    function _requireFromEntryPoint() internal virtual view {\\r\\n        require(msg.sender == address(entryPoint()), \\\"account: not from EntryPoint\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * validate the signature is valid for this message.\\r\\n     * @param userOp validate the userOp.signature field\\r\\n     * @param userOpHash convenient field: the hash of the request, to check the signature against\\r\\n     *          (also hashes the entrypoint and chain id)\\r\\n     * @return validationData signature and time-range of this operation\\r\\n     *      <20-byte> sigAuthorizer - 0 for valid signature, 1 to mark signature failure,\\r\\n     *         otherwise, an address of an \\\"authorizer\\\" contract.\\r\\n     *      <6-byte> validUntil - last timestamp this operation is valid. 0 for \\\"indefinite\\\"\\r\\n     *      <6-byte> validAfter - first timestamp this operation is valid\\r\\n     *      If the account doesn't use time-range, it is enough to return SIG_VALIDATION_FAILED value (1) for signature failure.\\r\\n     *      Note that the validation code cannot use block.timestamp (or block.number) directly.\\r\\n     */\\r\\n    function _validateSignature(UserOperation calldata userOp, bytes32 userOpHash)\\r\\n    internal virtual returns (uint256 validationData);\\r\\n\\r\\n    /**\\r\\n     * Validate the nonce of the UserOperation.\\r\\n     * This method may validate the nonce requirement of this account.\\r\\n     * e.g.\\r\\n     * To limit the nonce to use sequenced UserOps only (no \\\"out of order\\\" UserOps):\\r\\n     *      `require(nonce < type(uint64).max)`\\r\\n     * For a hypothetical account that *requires* the nonce to be out-of-order:\\r\\n     *      `require(nonce & type(uint64).max == 0)`\\r\\n     *\\r\\n     * The actual nonce uniqueness is managed by the EntryPoint, and thus no other\\r\\n     * action is needed by the account itself.\\r\\n     *\\r\\n     * @param nonce to validate\\r\\n     *\\r\\n     * solhint-disable-next-line no-empty-blocks\\r\\n     */\\r\\n    function _validateNonce(uint256 nonce) internal view virtual {\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * sends to the entrypoint (msg.sender) the missing funds for this transaction.\\r\\n     * subclass MAY override this method for better funds management\\r\\n     * (e.g. send to the entryPoint more than the minimum required, so that in future transactions\\r\\n     * it will not be required to send again)\\r\\n     * @param missingAccountFunds the minimum value this method should send the entrypoint.\\r\\n     *  this value MAY be zero, in case there is enough deposit, or the userOp has a paymaster.\\r\\n     */\\r\\n    function _payPrefund(uint256 missingAccountFunds) internal virtual {\\r\\n        if (missingAccountFunds != 0) {\\r\\n            (bool success,) = payable(msg.sender).call{value : missingAccountFunds, gas : type(uint256).max}(\\\"\\\");\\r\\n            (success);\\r\\n            //ignore failure (its EntryPoint's job to verify, not account.)\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x14230c2a2c14b818a60f1c8f9dcc66df870c38f6bccc7f4c543e96937e4a99aa\",\"license\":\"GPL-3.0\"},\"contracts/core/Helpers.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8.12;\\r\\n\\r\\n/* solhint-disable no-inline-assembly */\\r\\n\\r\\n/**\\r\\n * returned data from validateUserOp.\\r\\n * validateUserOp returns a uint256, with is created by `_packedValidationData` and parsed by `_parseValidationData`\\r\\n * @param aggregator - address(0) - the account validated the signature by itself.\\r\\n *              address(1) - the account failed to validate the signature.\\r\\n *              otherwise - this is an address of a signature aggregator that must be used to validate the signature.\\r\\n * @param validAfter - this UserOp is valid only after this timestamp.\\r\\n * @param validaUntil - this UserOp is valid only up to this timestamp.\\r\\n */\\r\\n    struct ValidationData {\\r\\n        address aggregator;\\r\\n        uint48 validAfter;\\r\\n        uint48 validUntil;\\r\\n    }\\r\\n\\r\\n//extract sigFailed, validAfter, validUntil.\\r\\n// also convert zero validUntil to type(uint48).max\\r\\n    function _parseValidationData(uint validationData) pure returns (ValidationData memory data) {\\r\\n        address aggregator = address(uint160(validationData));\\r\\n        uint48 validUntil = uint48(validationData >> 160);\\r\\n        if (validUntil == 0) {\\r\\n            validUntil = type(uint48).max;\\r\\n        }\\r\\n        uint48 validAfter = uint48(validationData >> (48 + 160));\\r\\n        return ValidationData(aggregator, validAfter, validUntil);\\r\\n    }\\r\\n\\r\\n// intersect account and paymaster ranges.\\r\\n    function _intersectTimeRange(uint256 validationData, uint256 paymasterValidationData) pure returns (ValidationData memory) {\\r\\n        ValidationData memory accountValidationData = _parseValidationData(validationData);\\r\\n        ValidationData memory pmValidationData = _parseValidationData(paymasterValidationData);\\r\\n        address aggregator = accountValidationData.aggregator;\\r\\n        if (aggregator == address(0)) {\\r\\n            aggregator = pmValidationData.aggregator;\\r\\n        }\\r\\n        uint48 validAfter = accountValidationData.validAfter;\\r\\n        uint48 validUntil = accountValidationData.validUntil;\\r\\n        uint48 pmValidAfter = pmValidationData.validAfter;\\r\\n        uint48 pmValidUntil = pmValidationData.validUntil;\\r\\n\\r\\n        if (validAfter < pmValidAfter) validAfter = pmValidAfter;\\r\\n        if (validUntil > pmValidUntil) validUntil = pmValidUntil;\\r\\n        return ValidationData(aggregator, validAfter, validUntil);\\r\\n    }\\r\\n\\r\\n/**\\r\\n * helper to pack the return value for validateUserOp\\r\\n * @param data - the ValidationData to pack\\r\\n */\\r\\n    function _packValidationData(ValidationData memory data) pure returns (uint256) {\\r\\n        return uint160(data.aggregator) | (uint256(data.validUntil) << 160) | (uint256(data.validAfter) << (160 + 48));\\r\\n    }\\r\\n\\r\\n/**\\r\\n * helper to pack the return value for validateUserOp, when not using an aggregator\\r\\n * @param sigFailed - true for signature failure, false for success\\r\\n * @param validUntil last timestamp this UserOperation is valid (or zero for infinite)\\r\\n * @param validAfter first timestamp this UserOperation is valid\\r\\n */\\r\\n    function _packValidationData(bool sigFailed, uint48 validUntil, uint48 validAfter) pure returns (uint256) {\\r\\n        return (sigFailed ? 1 : 0) | (uint256(validUntil) << 160) | (uint256(validAfter) << (160 + 48));\\r\\n    }\\r\\n\\r\\n/**\\r\\n * keccak function over calldata.\\r\\n * @dev copy calldata into memory, do keccak and drop allocated memory. Strangely, this is more efficient than letting solidity do it.\\r\\n */\\r\\n    function calldataKeccak(bytes calldata data) pure returns (bytes32 ret) {\\r\\n        assembly {\\r\\n            let mem := mload(0x40)\\r\\n            let len := data.length\\r\\n            calldatacopy(mem, data.offset, len)\\r\\n            ret := keccak256(mem, len)\\r\\n        }\\r\\n    }\\r\\n\\r\\n\",\"keccak256\":\"0xd0e3f0ed1a540a380fab5dda8aeafcace263802e60095deec17cc96dd1590743\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IAccount.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8.12;\\r\\n\\r\\nimport \\\"./UserOperation.sol\\\";\\r\\n\\r\\ninterface IAccount {\\r\\n\\r\\n    /**\\r\\n     * Validate user's signature and nonce\\r\\n     * the entryPoint will make the call to the recipient only if this validation call returns successfully.\\r\\n     * signature failure should be reported by returning SIG_VALIDATION_FAILED (1).\\r\\n     * This allows making a \\\"simulation call\\\" without a valid signature\\r\\n     * Other failures (e.g. nonce mismatch, or invalid signature format) should still revert to signal failure.\\r\\n     *\\r\\n     * @dev Must validate caller is the entryPoint.\\r\\n     *      Must validate the signature and nonce\\r\\n     * @param userOp the operation that is about to be executed.\\r\\n     * @param userOpHash hash of the user's request data. can be used as the basis for signature.\\r\\n     * @param missingAccountFunds missing funds on the account's deposit in the entrypoint.\\r\\n     *      This is the minimum amount to transfer to the sender(entryPoint) to be able to make the call.\\r\\n     *      The excess is left as a deposit in the entrypoint, for future calls.\\r\\n     *      can be withdrawn anytime using \\\"entryPoint.withdrawTo()\\\"\\r\\n     *      In case there is a paymaster in the request (or the current deposit is high enough), this value will be zero.\\r\\n     * @return validationData packaged ValidationData structure. use `_packValidationData` and `_unpackValidationData` to encode and decode\\r\\n     *      <20-byte> sigAuthorizer - 0 for valid signature, 1 to mark signature failure,\\r\\n     *         otherwise, an address of an \\\"authorizer\\\" contract.\\r\\n     *      <6-byte> validUntil - last timestamp this operation is valid. 0 for \\\"indefinite\\\"\\r\\n     *      <6-byte> validAfter - first timestamp this operation is valid\\r\\n     *      If an account doesn't use time-range, it is enough to return SIG_VALIDATION_FAILED value (1) for signature failure.\\r\\n     *      Note that the validation code cannot use block.timestamp (or block.number) directly.\\r\\n     */\\r\\n    function validateUserOp(UserOperation calldata userOp, bytes32 userOpHash, uint256 missingAccountFunds)\\r\\n    external returns (uint256 validationData);\\r\\n}\\r\\n\",\"keccak256\":\"0x3dc911b985542365d3e321c86dd144ea20f9fde8662d8bdfc1c2dc778750c74b\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IAggregator.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8.12;\\r\\n\\r\\nimport \\\"./UserOperation.sol\\\";\\r\\n\\r\\n/**\\r\\n * Aggregated Signatures validator.\\r\\n */\\r\\ninterface IAggregator {\\r\\n\\r\\n    /**\\r\\n     * validate aggregated signature.\\r\\n     * revert if the aggregated signature does not match the given list of operations.\\r\\n     */\\r\\n    function validateSignatures(UserOperation[] calldata userOps, bytes calldata signature) external view;\\r\\n\\r\\n    /**\\r\\n     * validate signature of a single userOp\\r\\n     * This method is should be called by bundler after EntryPoint.simulateValidation() returns (reverts) with ValidationResultWithAggregation\\r\\n     * First it validates the signature over the userOp. Then it returns data to be used when creating the handleOps.\\r\\n     * @param userOp the userOperation received from the user.\\r\\n     * @return sigForUserOp the value to put into the signature field of the userOp when calling handleOps.\\r\\n     *    (usually empty, unless account and aggregator support some kind of \\\"multisig\\\"\\r\\n     */\\r\\n    function validateUserOpSignature(UserOperation calldata userOp)\\r\\n    external view returns (bytes memory sigForUserOp);\\r\\n\\r\\n    /**\\r\\n     * aggregate multiple signatures into a single value.\\r\\n     * This method is called off-chain to calculate the signature to pass with handleOps()\\r\\n     * bundler MAY use optimized custom code perform this aggregation\\r\\n     * @param userOps array of UserOperations to collect the signatures from.\\r\\n     * @return aggregatedSignature the aggregated signature\\r\\n     */\\r\\n    function aggregateSignatures(UserOperation[] calldata userOps) external view returns (bytes memory aggregatedSignature);\\r\\n}\\r\\n\",\"keccak256\":\"0xfc25632a56d81f044b9faf18d3bc7cf75cf45c107a5f29c90cc9b746b9a8ab6d\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IEntryPoint.sol\":{\"content\":\"/**\\r\\n ** Account-Abstraction (EIP-4337) singleton EntryPoint implementation.\\r\\n ** Only one instance required on each chain.\\r\\n **/\\r\\n// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8.12;\\r\\n\\r\\n/* solhint-disable avoid-low-level-calls */\\r\\n/* solhint-disable no-inline-assembly */\\r\\n/* solhint-disable reason-string */\\r\\n\\r\\nimport \\\"./UserOperation.sol\\\";\\r\\nimport \\\"./IStakeManager.sol\\\";\\r\\nimport \\\"./IAggregator.sol\\\";\\r\\nimport \\\"./INonceManager.sol\\\";\\r\\n\\r\\ninterface IEntryPoint is IStakeManager, INonceManager {\\r\\n\\r\\n    /***\\r\\n     * An event emitted after each successful request\\r\\n     * @param userOpHash - unique identifier for the request (hash its entire content, except signature).\\r\\n     * @param sender - the account that generates this request.\\r\\n     * @param paymaster - if non-null, the paymaster that pays for this request.\\r\\n     * @param nonce - the nonce value from the request.\\r\\n     * @param success - true if the sender transaction succeeded, false if reverted.\\r\\n     * @param actualGasCost - actual amount paid (by account or paymaster) for this UserOperation.\\r\\n     * @param actualGasUsed - total gas used by this UserOperation (including preVerification, creation, validation and execution).\\r\\n     */\\r\\n    event UserOperationEvent(bytes32 indexed userOpHash, address indexed sender, address indexed paymaster, uint256 nonce, bool success, uint256 actualGasCost, uint256 actualGasUsed);\\r\\n\\r\\n    /**\\r\\n     * account \\\"sender\\\" was deployed.\\r\\n     * @param userOpHash the userOp that deployed this account. UserOperationEvent will follow.\\r\\n     * @param sender the account that is deployed\\r\\n     * @param factory the factory used to deploy this account (in the initCode)\\r\\n     * @param paymaster the paymaster used by this UserOp\\r\\n     */\\r\\n    event AccountDeployed(bytes32 indexed userOpHash, address indexed sender, address factory, address paymaster);\\r\\n\\r\\n    /**\\r\\n     * An event emitted if the UserOperation \\\"callData\\\" reverted with non-zero length\\r\\n     * @param userOpHash the request unique identifier.\\r\\n     * @param sender the sender of this request\\r\\n     * @param nonce the nonce used in the request\\r\\n     * @param revertReason - the return bytes from the (reverted) call to \\\"callData\\\".\\r\\n     */\\r\\n    event UserOperationRevertReason(bytes32 indexed userOpHash, address indexed sender, uint256 nonce, bytes revertReason);\\r\\n\\r\\n    /**\\r\\n     * an event emitted by handleOps(), before starting the execution loop.\\r\\n     * any event emitted before this event, is part of the validation.\\r\\n     */\\r\\n    event BeforeExecution();\\r\\n\\r\\n    /**\\r\\n     * signature aggregator used by the following UserOperationEvents within this bundle.\\r\\n     */\\r\\n    event SignatureAggregatorChanged(address indexed aggregator);\\r\\n\\r\\n    /**\\r\\n     * a custom revert error of handleOps, to identify the offending op.\\r\\n     *  NOTE: if simulateValidation passes successfully, there should be no reason for handleOps to fail on it.\\r\\n     *  @param opIndex - index into the array of ops to the failed one (in simulateValidation, this is always zero)\\r\\n     *  @param reason - revert reason\\r\\n     *      The string starts with a unique code \\\"AAmn\\\", where \\\"m\\\" is \\\"1\\\" for factory, \\\"2\\\" for account and \\\"3\\\" for paymaster issues,\\r\\n     *      so a failure can be attributed to the correct entity.\\r\\n     *   Should be caught in off-chain handleOps simulation and not happen on-chain.\\r\\n     *   Useful for mitigating DoS attempts against batchers or for troubleshooting of factory/account/paymaster reverts.\\r\\n     */\\r\\n    error FailedOp(uint256 opIndex, string reason);\\r\\n\\r\\n    /**\\r\\n     * error case when a signature aggregator fails to verify the aggregated signature it had created.\\r\\n     */\\r\\n    error SignatureValidationFailed(address aggregator);\\r\\n\\r\\n    /**\\r\\n     * Successful result from simulateValidation.\\r\\n     * @param returnInfo gas and time-range returned values\\r\\n     * @param senderInfo stake information about the sender\\r\\n     * @param factoryInfo stake information about the factory (if any)\\r\\n     * @param paymasterInfo stake information about the paymaster (if any)\\r\\n     */\\r\\n    error ValidationResult(ReturnInfo returnInfo,\\r\\n        StakeInfo senderInfo, StakeInfo factoryInfo, StakeInfo paymasterInfo);\\r\\n\\r\\n    /**\\r\\n     * Successful result from simulateValidation, if the account returns a signature aggregator\\r\\n     * @param returnInfo gas and time-range returned values\\r\\n     * @param senderInfo stake information about the sender\\r\\n     * @param factoryInfo stake information about the factory (if any)\\r\\n     * @param paymasterInfo stake information about the paymaster (if any)\\r\\n     * @param aggregatorInfo signature aggregation info (if the account requires signature aggregator)\\r\\n     *      bundler MUST use it to verify the signature, or reject the UserOperation\\r\\n     */\\r\\n    error ValidationResultWithAggregation(ReturnInfo returnInfo,\\r\\n        StakeInfo senderInfo, StakeInfo factoryInfo, StakeInfo paymasterInfo,\\r\\n        AggregatorStakeInfo aggregatorInfo);\\r\\n\\r\\n    /**\\r\\n     * return value of getSenderAddress\\r\\n     */\\r\\n    error SenderAddressResult(address sender);\\r\\n\\r\\n    /**\\r\\n     * return value of simulateHandleOp\\r\\n     */\\r\\n    error ExecutionResult(uint256 preOpGas, uint256 paid, uint48 validAfter, uint48 validUntil, bool targetSuccess, bytes targetResult);\\r\\n\\r\\n    //UserOps handled, per aggregator\\r\\n    struct UserOpsPerAggregator {\\r\\n        UserOperation[] userOps;\\r\\n\\r\\n        // aggregator address\\r\\n        IAggregator aggregator;\\r\\n        // aggregated signature\\r\\n        bytes signature;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Execute a batch of UserOperation.\\r\\n     * no signature aggregator is used.\\r\\n     * if any account requires an aggregator (that is, it returned an aggregator when\\r\\n     * performing simulateValidation), then handleAggregatedOps() must be used instead.\\r\\n     * @param ops the operations to execute\\r\\n     * @param beneficiary the address to receive the fees\\r\\n     */\\r\\n    function handleOps(UserOperation[] calldata ops, address payable beneficiary) external;\\r\\n\\r\\n    /**\\r\\n     * Execute a batch of UserOperation with Aggregators\\r\\n     * @param opsPerAggregator the operations to execute, grouped by aggregator (or address(0) for no-aggregator accounts)\\r\\n     * @param beneficiary the address to receive the fees\\r\\n     */\\r\\n    function handleAggregatedOps(\\r\\n        UserOpsPerAggregator[] calldata opsPerAggregator,\\r\\n        address payable beneficiary\\r\\n    ) external;\\r\\n\\r\\n    /**\\r\\n     * generate a request Id - unique identifier for this request.\\r\\n     * the request ID is a hash over the content of the userOp (except the signature), the entrypoint and the chainid.\\r\\n     */\\r\\n    function getUserOpHash(UserOperation calldata userOp) external view returns (bytes32);\\r\\n\\r\\n    /**\\r\\n     * Simulate a call to account.validateUserOp and paymaster.validatePaymasterUserOp.\\r\\n     * @dev this method always revert. Successful result is ValidationResult error. other errors are failures.\\r\\n     * @dev The node must also verify it doesn't use banned opcodes, and that it doesn't reference storage outside the account's data.\\r\\n     * @param userOp the user operation to validate.\\r\\n     */\\r\\n    function simulateValidation(UserOperation calldata userOp) external;\\r\\n\\r\\n    /**\\r\\n     * gas and return values during simulation\\r\\n     * @param preOpGas the gas used for validation (including preValidationGas)\\r\\n     * @param prefund the required prefund for this operation\\r\\n     * @param sigFailed validateUserOp's (or paymaster's) signature check failed\\r\\n     * @param validAfter - first timestamp this UserOp is valid (merging account and paymaster time-range)\\r\\n     * @param validUntil - last timestamp this UserOp is valid (merging account and paymaster time-range)\\r\\n     * @param paymasterContext returned by validatePaymasterUserOp (to be passed into postOp)\\r\\n     */\\r\\n    struct ReturnInfo {\\r\\n        uint256 preOpGas;\\r\\n        uint256 prefund;\\r\\n        bool sigFailed;\\r\\n        uint48 validAfter;\\r\\n        uint48 validUntil;\\r\\n        bytes paymasterContext;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * returned aggregated signature info.\\r\\n     * the aggregator returned by the account, and its current stake.\\r\\n     */\\r\\n    struct AggregatorStakeInfo {\\r\\n        address aggregator;\\r\\n        StakeInfo stakeInfo;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * Get counterfactual sender address.\\r\\n     *  Calculate the sender contract address that will be generated by the initCode and salt in the UserOperation.\\r\\n     * this method always revert, and returns the address in SenderAddressResult error\\r\\n     * @param initCode the constructor code to be passed into the UserOperation.\\r\\n     */\\r\\n    function getSenderAddress(bytes memory initCode) external;\\r\\n\\r\\n\\r\\n    /**\\r\\n     * simulate full execution of a UserOperation (including both validation and target execution)\\r\\n     * this method will always revert with \\\"ExecutionResult\\\".\\r\\n     * it performs full validation of the UserOperation, but ignores signature error.\\r\\n     * an optional target address is called after the userop succeeds, and its value is returned\\r\\n     * (before the entire call is reverted)\\r\\n     * Note that in order to collect the the success/failure of the target call, it must be executed\\r\\n     * with trace enabled to track the emitted events.\\r\\n     * @param op the UserOperation to simulate\\r\\n     * @param target if nonzero, a target address to call after userop simulation. If called, the targetSuccess and targetResult\\r\\n     *        are set to the return from that call.\\r\\n     * @param targetCallData callData to pass to target address\\r\\n     */\\r\\n    function simulateHandleOp(UserOperation calldata op, address target, bytes calldata targetCallData) external;\\r\\n}\\r\\n\\r\\n\",\"keccak256\":\"0xe43f3d60c2df16d7c78f9da7067da1b0c7c66f61f60290552364992f0aaf13a3\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IGuardian.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8.12;\\r\\n\\r\\ninterface IGuardian {\\r\\n    // The guardian relationship of the storage account\\r\\n    struct GuardianConfig {\\r\\n        address[] guardians;\\r\\n        uint256 approveThreshold;\\r\\n        uint256 delay;\\r\\n    }\\r\\n\\r\\n    event Register(address indexed account, address indexed guardian);\\r\\n\\r\\n    event Approved(\\r\\n        address indexed account,\\r\\n        address indexed guardian,\\r\\n        address newOwner\\r\\n    );\\r\\n\\r\\n    event ChangeGuardianConfig(\\r\\n        address indexed account,\\r\\n        address[] guardians,\\r\\n        uint256 approveThreshold,\\r\\n        uint256 delayBlock\\r\\n    );\\r\\n\\r\\n    function setConfig(\\r\\n        address account,\\r\\n        IGuardian.GuardianConfig memory config\\r\\n    ) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xc36fe615f4b5e4e4d9033790e0abede62a2a13d53a8ba1a4df341226e75b4957\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/INonceManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8.12;\\r\\n\\r\\ninterface INonceManager {\\r\\n\\r\\n    /**\\r\\n     * Return the next nonce for this sender.\\r\\n     * Within a given key, the nonce values are sequenced (starting with zero, and incremented by one on each userop)\\r\\n     * But UserOp with different keys can come with arbitrary order.\\r\\n     *\\r\\n     * @param sender the account address\\r\\n     * @param key the high 192 bit of the nonce\\r\\n     * @return nonce a full nonce to pass for next UserOp with this sender.\\r\\n     */\\r\\n    function getNonce(address sender, uint192 key)\\r\\n    external view returns (uint256 nonce);\\r\\n\\r\\n    /**\\r\\n     * Manually increment the nonce of the sender.\\r\\n     * This method is exposed just for completeness..\\r\\n     * Account does NOT need to call it, neither during validation, nor elsewhere,\\r\\n     * as the EntryPoint will update the nonce regardless.\\r\\n     * Possible use-case is call it with various keys to \\\"initialize\\\" their nonces to one, so that future\\r\\n     * UserOperations will not pay extra for the first transaction with a given key.\\r\\n     */\\r\\n    function incrementNonce(uint192 key) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xaac170aa38a3adde8ad100930d585a725e1217eee4b0828bab88dc387953bd35\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/IStakeManager.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0-only\\r\\npragma solidity ^0.8.12;\\r\\n\\r\\n/**\\r\\n * manage deposits and stakes.\\r\\n * deposit is just a balance used to pay for UserOperations (either by a paymaster or an account)\\r\\n * stake is value locked for at least \\\"unstakeDelay\\\" by the staked entity.\\r\\n */\\r\\ninterface IStakeManager {\\r\\n\\r\\n    event Deposited(\\r\\n        address indexed account,\\r\\n        uint256 totalDeposit\\r\\n    );\\r\\n\\r\\n    event Withdrawn(\\r\\n        address indexed account,\\r\\n        address withdrawAddress,\\r\\n        uint256 amount\\r\\n    );\\r\\n\\r\\n    /// Emitted when stake or unstake delay are modified\\r\\n    event StakeLocked(\\r\\n        address indexed account,\\r\\n        uint256 totalStaked,\\r\\n        uint256 unstakeDelaySec\\r\\n    );\\r\\n\\r\\n    /// Emitted once a stake is scheduled for withdrawal\\r\\n    event StakeUnlocked(\\r\\n        address indexed account,\\r\\n        uint256 withdrawTime\\r\\n    );\\r\\n\\r\\n    event StakeWithdrawn(\\r\\n        address indexed account,\\r\\n        address withdrawAddress,\\r\\n        uint256 amount\\r\\n    );\\r\\n\\r\\n    /**\\r\\n     * @param deposit the entity's deposit\\r\\n     * @param staked true if this entity is staked.\\r\\n     * @param stake actual amount of ether staked for this entity.\\r\\n     * @param unstakeDelaySec minimum delay to withdraw the stake.\\r\\n     * @param withdrawTime - first block timestamp where 'withdrawStake' will be callable, or zero if already locked\\r\\n     * @dev sizes were chosen so that (deposit,staked, stake) fit into one cell (used during handleOps)\\r\\n     *    and the rest fit into a 2nd cell.\\r\\n     *    112 bit allows for 10^15 eth\\r\\n     *    48 bit for full timestamp\\r\\n     *    32 bit allows 150 years for unstake delay\\r\\n     */\\r\\n    struct DepositInfo {\\r\\n        uint112 deposit;\\r\\n        bool staked;\\r\\n        uint112 stake;\\r\\n        uint32 unstakeDelaySec;\\r\\n        uint48 withdrawTime;\\r\\n    }\\r\\n\\r\\n    //API struct used by getStakeInfo and simulateValidation\\r\\n    struct StakeInfo {\\r\\n        uint256 stake;\\r\\n        uint256 unstakeDelaySec;\\r\\n    }\\r\\n\\r\\n    /// @return info - full deposit information of given account\\r\\n    function getDepositInfo(address account) external view returns (DepositInfo memory info);\\r\\n\\r\\n    /// @return the deposit (for gas payment) of the account\\r\\n    function balanceOf(address account) external view returns (uint256);\\r\\n\\r\\n    /**\\r\\n     * add to the deposit of the given account\\r\\n     */\\r\\n    function depositTo(address account) external payable;\\r\\n\\r\\n    /**\\r\\n     * add to the account's stake - amount and delay\\r\\n     * any pending unstake is first cancelled.\\r\\n     * @param _unstakeDelaySec the new lock duration before the deposit can be withdrawn.\\r\\n     */\\r\\n    function addStake(uint32 _unstakeDelaySec) external payable;\\r\\n\\r\\n    /**\\r\\n     * attempt to unlock the stake.\\r\\n     * the value can be withdrawn (using withdrawStake) after the unstake delay.\\r\\n     */\\r\\n    function unlockStake() external;\\r\\n\\r\\n    /**\\r\\n     * withdraw from the (unlocked) stake.\\r\\n     * must first call unlockStake and wait for the unstakeDelay to pass\\r\\n     * @param withdrawAddress the address to send withdrawn value.\\r\\n     */\\r\\n    function withdrawStake(address payable withdrawAddress) external;\\r\\n\\r\\n    /**\\r\\n     * withdraw from the deposit.\\r\\n     * @param withdrawAddress the address to send withdrawn value.\\r\\n     * @param withdrawAmount the amount to withdraw.\\r\\n     */\\r\\n    function withdrawTo(address payable withdrawAddress, uint256 withdrawAmount) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xda1caee7c7c1971432bad377ef0f92a1be3786af639900276448670eebe1e7d6\",\"license\":\"GPL-3.0-only\"},\"contracts/interfaces/ITSPAccount.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8.12;\\r\\n\\r\\ninterface ITSPAccount {\\r\\n    event ResetOwner(\\r\\n        address indexed account,\\r\\n        address oldOwner,\\r\\n        address newOwner\\r\\n    );\\r\\n\\r\\n    function resetOwner(address newAddress) external;\\r\\n}\\r\\n\",\"keccak256\":\"0xa22d21f8a3712bf49261cbac6e6d5c1705a65e77ddbb22f3c9ed6dc80e87a377\",\"license\":\"GPL-3.0\"},\"contracts/interfaces/UserOperation.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8.12;\\r\\n\\r\\n/* solhint-disable no-inline-assembly */\\r\\n\\r\\nimport {calldataKeccak} from \\\"../core/Helpers.sol\\\";\\r\\n\\r\\n/**\\r\\n * User Operation struct\\r\\n * @param sender the sender account of this request.\\r\\n     * @param nonce unique value the sender uses to verify it is not a replay.\\r\\n     * @param initCode if set, the account contract will be created by this constructor/\\r\\n     * @param callData the method call to execute on this account.\\r\\n     * @param callGasLimit the gas limit passed to the callData method call.\\r\\n     * @param verificationGasLimit gas used for validateUserOp and validatePaymasterUserOp.\\r\\n     * @param preVerificationGas gas not calculated by the handleOps method, but added to the gas paid. Covers batch overhead.\\r\\n     * @param maxFeePerGas same as EIP-1559 gas parameter.\\r\\n     * @param maxPriorityFeePerGas same as EIP-1559 gas parameter.\\r\\n     * @param paymasterAndData if set, this field holds the paymaster address and paymaster-specific data. the paymaster will pay for the transaction instead of the sender.\\r\\n     * @param signature sender-verified signature over the entire request, the EntryPoint address and the chain ID.\\r\\n     */\\r\\n    struct UserOperation {\\r\\n\\r\\n        address sender;\\r\\n        uint256 nonce;\\r\\n        bytes initCode;\\r\\n        bytes callData;\\r\\n        uint256 callGasLimit;\\r\\n        uint256 verificationGasLimit;\\r\\n        uint256 preVerificationGas;\\r\\n        uint256 maxFeePerGas;\\r\\n        uint256 maxPriorityFeePerGas;\\r\\n        bytes paymasterAndData;\\r\\n        bytes signature;\\r\\n    }\\r\\n\\r\\n/**\\r\\n * Utility functions helpful when working with UserOperation structs.\\r\\n */\\r\\nlibrary UserOperationLib {\\r\\n\\r\\n    function getSender(UserOperation calldata userOp) internal pure returns (address) {\\r\\n        address data;\\r\\n        //read sender from userOp, which is first userOp member (saves 800 gas...)\\r\\n        assembly {data := calldataload(userOp)}\\r\\n        return address(uint160(data));\\r\\n    }\\r\\n\\r\\n    //relayer/block builder might submit the TX with higher priorityFee, but the user should not\\r\\n    // pay above what he signed for.\\r\\n    function gasPrice(UserOperation calldata userOp) internal view returns (uint256) {\\r\\n    unchecked {\\r\\n        uint256 maxFeePerGas = userOp.maxFeePerGas;\\r\\n        uint256 maxPriorityFeePerGas = userOp.maxPriorityFeePerGas;\\r\\n        if (maxFeePerGas == maxPriorityFeePerGas) {\\r\\n            //legacy mode (for networks that don't support basefee opcode)\\r\\n            return maxFeePerGas;\\r\\n        }\\r\\n        return min(maxFeePerGas, maxPriorityFeePerGas + block.basefee);\\r\\n    }\\r\\n    }\\r\\n\\r\\n    function pack(UserOperation calldata userOp) internal pure returns (bytes memory ret) {\\r\\n        address sender = getSender(userOp);\\r\\n        uint256 nonce = userOp.nonce;\\r\\n        bytes32 hashInitCode = calldataKeccak(userOp.initCode);\\r\\n        bytes32 hashCallData = calldataKeccak(userOp.callData);\\r\\n        uint256 callGasLimit = userOp.callGasLimit;\\r\\n        uint256 verificationGasLimit = userOp.verificationGasLimit;\\r\\n        uint256 preVerificationGas = userOp.preVerificationGas;\\r\\n        uint256 maxFeePerGas = userOp.maxFeePerGas;\\r\\n        uint256 maxPriorityFeePerGas = userOp.maxPriorityFeePerGas;\\r\\n        bytes32 hashPaymasterAndData = calldataKeccak(userOp.paymasterAndData);\\r\\n\\r\\n        return abi.encode(\\r\\n            sender, nonce,\\r\\n            hashInitCode, hashCallData,\\r\\n            callGasLimit, verificationGasLimit, preVerificationGas,\\r\\n            maxFeePerGas, maxPriorityFeePerGas,\\r\\n            hashPaymasterAndData\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function hash(UserOperation calldata userOp) internal pure returns (bytes32) {\\r\\n        return keccak256(pack(userOp));\\r\\n    }\\r\\n\\r\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\r\\n        return a < b ? a : b;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x1487b6ac6d5bb83af209fa1f272f0952d80e5789485946e2f2718bcc4c190f6d\",\"license\":\"GPL-3.0\"},\"contracts/samples/Guardian.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8.12;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\r\\n\\r\\nimport \\\"../interfaces/IAccount.sol\\\";\\r\\nimport \\\"../interfaces/ITSPAccount.sol\\\";\\r\\nimport \\\"../interfaces/IGuardian.sol\\\";\\r\\n\\r\\ncontract Guardian is IGuardian {\\r\\n    using SafeMath for uint256;\\r\\n    // address public owner;\\r\\n    mapping(address => IGuardian.GuardianConfig) private _cabinet;\\r\\n    mapping(address => mapping(address => address)) private _approvesProgress;\\r\\n    mapping(address => uint256) public closestReset;\\r\\n\\r\\n    function setConfig(\\r\\n        address account,\\r\\n        IGuardian.GuardianConfig memory config\\r\\n    ) public {\\r\\n        _requireAccountOwner(account);\\r\\n        // Check the legality of the configuration\\r\\n        require(\\r\\n            config.approveThreshold > 0 && config.approveThreshold <= config.guardians.length,\\r\\n            \\\"The threshold must be greater than 0 and less than or equal to the number of guardians\\\"\\r\\n        );\\r\\n        require(config.guardians.length <= 5, \\\"Up to 5 guardians\\\");\\r\\n        require(\\r\\n            config.delay > 0,\\r\\n            \\\"The number of delayed verification blocks must be greater than or equal to 1\\\"\\r\\n        );\\r\\n        _cabinet[account] = config;\\r\\n        emit ChangeGuardianConfig(\\r\\n            account,\\r\\n            _cabinet[account].guardians,\\r\\n            _cabinet[account].approveThreshold,\\r\\n            _cabinet[account].delay\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // Owner authorized to modify the wallet\\r\\n    function approve(address account, address newAddress) public {\\r\\n        // Whether the verification is the guardian of the current account\\r\\n        require(newAddress != address(0), \\\"The new owner cannot be a zero address\\\");\\r\\n        require(\\r\\n            isAddressInArray(_cabinet[account].guardians, msg.sender),\\r\\n            \\\"you are not a guardian\\\"\\r\\n        );\\r\\n        IGuardian.GuardianConfig memory config = _cabinet[account];\\r\\n        for (uint256 i = 0; i < config.guardians.length; i++) {\\r\\n            address guardian = config.guardians[i];\\r\\n            address otherGuardianAddress = _approvesProgress[account][guardian];\\r\\n            // Check the guardian to assist in the designated EOA consistent\\r\\n            if (\\r\\n                otherGuardianAddress != address(0) &&\\r\\n                otherGuardianAddress != newAddress\\r\\n            ) {\\r\\n                // Remove other addresses that are inconsistent with the current guardian\\r\\n                delete _approvesProgress[account][guardian];\\r\\n            }\\r\\n        }\\r\\n        _approvesProgress[account][msg.sender] = newAddress;\\r\\n        closestReset[account] = block.timestamp + _cabinet[account].delay;\\r\\n        emit Approved(account, msg.sender, newAddress);\\r\\n    }\\r\\n\\r\\n    function resetAccountOwner(address account) public {\\r\\n        (address newAddress, uint256 progress) = _getApproveProgress(account);\\r\\n        if (progress >= _cabinet[account].approveThreshold) {\\r\\n            if (closestReset[account] > block.timestamp) {\\r\\n                revert(\\\"the delay reset time has not yet reached\\\");\\r\\n            }\\r\\n            delete closestReset[account];\\r\\n            _resetAccountOwner(account, newAddress);\\r\\n        } else {\\r\\n            revert(\\\"the threshold value has not been reached\\\");\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function _resetAccountOwner(address account, address newAddress) private {\\r\\n        ITSPAccount(account).resetOwner(newAddress);\\r\\n        // Clear authorization record\\r\\n        _clearApproves(account);\\r\\n    }\\r\\n\\r\\n    function clearApproves(address account) public {\\r\\n        _requireAccountOwner(account);\\r\\n        delete closestReset[account];\\r\\n        _clearApproves(account);\\r\\n    }\\r\\n\\r\\n    function _clearApproves(address account) private {\\r\\n        IGuardian.GuardianConfig memory config = _cabinet[account];\\r\\n        for (uint256 i = 0; i < config.guardians.length; i++) {\\r\\n            address guardian = config.guardians[i];\\r\\n            if (_approvesProgress[account][guardian] != address(0)) {\\r\\n                delete _approvesProgress[account][guardian];\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getApproveProgress(\\r\\n        address account\\r\\n    ) public view returns (address newAddress, uint256 progress) {\\r\\n        return _getApproveProgress(account);\\r\\n    }\\r\\n\\r\\n    function _getApproveProgress(\\r\\n        address account\\r\\n    ) private view returns (address first, uint256 progress) {\\r\\n        IGuardian.GuardianConfig memory config = _cabinet[account];\\r\\n\\r\\n        uint256 n = 0;\\r\\n        for (uint256 i = 0; i < config.guardians.length; i++) {\\r\\n            address guardian = config.guardians[i];\\r\\n            address addr = _approvesProgress[account][guardian];\\r\\n            // Check the guardian to assist in the designated EOA consistent\\r\\n            if (first == address(0) && addr != address(0)) {\\r\\n                first = addr;\\r\\n            }\\r\\n            if (addr != address(0) && addr == first) {\\r\\n                n += 1;\\r\\n            }\\r\\n        }\\r\\n        return (first, n);\\r\\n    }\\r\\n\\r\\n    function isAddressInArray(\\r\\n        address[] memory addresses,\\r\\n        address target\\r\\n    ) public pure returns (bool) {\\r\\n        for (uint256 i = 0; i < addresses.length; i++) {\\r\\n            if (addresses[i] == target) {\\r\\n                return true;\\r\\n            }\\r\\n        }\\r\\n        return false;\\r\\n    }\\r\\n\\r\\n    // Require the function call went through EntryPoint or owner\\r\\n    function _requireAccountOwner(address account) internal view {\\r\\n        require(\\r\\n            msg.sender == account ||\\r\\n                msg.sender == Ownable(payable(account)).owner(),\\r\\n            \\\"account: not the account owner\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    function getGuardianConfig(\\r\\n        address account\\r\\n    ) public view returns (IGuardian.GuardianConfig memory config) {\\r\\n        return _cabinet[account];\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xace6def122f59c8a17c2edab2fd82dcece42c42a84f670e3bf3b41a8f8488386\",\"license\":\"GPL-3.0\"},\"contracts/samples/SimpleAccount.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8.12;\\r\\n\\r\\n/* solhint-disable avoid-low-level-calls */\\r\\n/* solhint-disable no-inline-assembly */\\r\\n/* solhint-disable reason-string */\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/proxy/utils/Initializable.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\\\";\\r\\n\\r\\nimport \\\"../core/BaseAccount.sol\\\";\\r\\nimport \\\"./callback/TokenCallbackHandler.sol\\\";\\r\\n\\r\\n/**\\r\\n  * minimal account.\\r\\n  *  this is sample minimal account.\\r\\n  *  has execute, eth handling methods\\r\\n  *  has a single signer that can send requests through the entryPoint.\\r\\n  */\\r\\ncontract SimpleAccount is BaseAccount, TokenCallbackHandler, UUPSUpgradeable, Initializable {\\r\\n    using ECDSA for bytes32;\\r\\n\\r\\n    address public owner;\\r\\n\\r\\n    IEntryPoint private immutable _entryPoint;\\r\\n\\r\\n    event SimpleAccountInitialized(IEntryPoint indexed entryPoint, address indexed owner);\\r\\n\\r\\n    modifier onlyOwner() {\\r\\n        _onlyOwner();\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    /// @inheritdoc BaseAccount\\r\\n    function entryPoint() public view virtual override returns (IEntryPoint) {\\r\\n        return _entryPoint;\\r\\n    }\\r\\n\\r\\n\\r\\n    // solhint-disable-next-line no-empty-blocks\\r\\n    receive() external payable {}\\r\\n\\r\\n    constructor(IEntryPoint anEntryPoint) {\\r\\n        _entryPoint = anEntryPoint;\\r\\n        _disableInitializers();\\r\\n    }\\r\\n\\r\\n    function _onlyOwner() internal view {\\r\\n        //directly from EOA owner, or through the account itself (which gets redirected through execute())\\r\\n        require(msg.sender == owner || msg.sender == address(this), \\\"only owner\\\");\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * execute a transaction (called directly from owner, or by entryPoint)\\r\\n     */\\r\\n    function execute(address dest, uint256 value, bytes calldata func) external virtual {\\r\\n        _requireFromEntryPointOrOwner();\\r\\n        _call(dest, value, func);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * execute a sequence of transactions\\r\\n     */\\r\\n    function executeBatch(address[] calldata dest, uint256[] calldata value, bytes[] calldata func) external virtual{\\r\\n        _requireFromEntryPointOrOwner();\\r\\n        require(dest.length == func.length && dest.length == value.length, \\\"wrong array lengths\\\");\\r\\n        for (uint256 i = 0; i < dest.length; i++) {\\r\\n            _call(dest[i], value[i], func[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev The _entryPoint member is immutable, to reduce gas consumption.  To upgrade EntryPoint,\\r\\n     * a new implementation of SimpleAccount must be deployed with the new EntryPoint address, then upgrading\\r\\n      * the implementation by calling `upgradeTo()`\\r\\n     */\\r\\n    function initialize(address anOwner) public virtual initializer {\\r\\n        _initialize(anOwner);\\r\\n    }\\r\\n\\r\\n    function _initialize(address anOwner) internal virtual {\\r\\n        owner = anOwner;\\r\\n        emit SimpleAccountInitialized(_entryPoint, owner);\\r\\n    }\\r\\n\\r\\n    // Require the function call went through EntryPoint or owner\\r\\n    function _requireFromEntryPointOrOwner() internal view {\\r\\n        require(msg.sender == address(entryPoint()) || msg.sender == owner, \\\"account: not Owner or EntryPoint\\\");\\r\\n    }\\r\\n\\r\\n    /// implement template method of BaseAccount\\r\\n    function _validateSignature(UserOperation calldata userOp, bytes32 userOpHash)\\r\\n    internal override virtual returns (uint256 validationData) {\\r\\n        bytes32 hash = userOpHash.toEthSignedMessageHash();\\r\\n        if (owner != hash.recover(userOp.signature))\\r\\n            return SIG_VALIDATION_FAILED;\\r\\n        return 0;\\r\\n    }\\r\\n\\r\\n    function _call(address target, uint256 value, bytes memory data) internal {\\r\\n        (bool success, bytes memory result) = target.call{value : value}(data);\\r\\n        if (!success) {\\r\\n            assembly {\\r\\n                revert(add(result, 32), mload(result))\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * check current account deposit in the entryPoint\\r\\n     */\\r\\n    function getDeposit() public view returns (uint256) {\\r\\n        return entryPoint().balanceOf(address(this));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * deposit more funds for this account in the entryPoint\\r\\n     */\\r\\n    function addDeposit() public payable {\\r\\n        entryPoint().depositTo{value : msg.value}(address(this));\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * withdraw value from the account's deposit\\r\\n     * @param withdrawAddress target to send to\\r\\n     * @param amount to withdraw\\r\\n     */\\r\\n    function withdrawDepositTo(address payable withdrawAddress, uint256 amount) public onlyOwner {\\r\\n        entryPoint().withdrawTo(withdrawAddress, amount);\\r\\n    }\\r\\n\\r\\n    function _authorizeUpgrade(address newImplementation) internal view override {\\r\\n        (newImplementation);\\r\\n        _onlyOwner();\\r\\n    }\\r\\n}\\r\\n\\r\\n\",\"keccak256\":\"0xaa821f0f08c0a9058827e9cbc47b65f281c36bff8143adf358d8a95e2d121a26\",\"license\":\"GPL-3.0\"},\"contracts/samples/TSPAccount.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8.12;\\r\\n\\r\\n/* solhint-disable avoid-low-level-calls */\\r\\n/* solhint-disable no-inline-assembly */\\r\\n/* solhint-disable reason-string */\\r\\n\\r\\nimport \\\"../interfaces/ITSPAccount.sol\\\";\\r\\nimport \\\"./SimpleAccount.sol\\\";\\r\\nimport \\\"../interfaces/IGuardian.sol\\\";\\r\\n\\r\\n/**\\r\\n * minimal account.\\r\\n *  this is sample minimal account.\\r\\n *  has execute, eth handling methods\\r\\n *  has a single signer that can send requests through the entryPoint.\\r\\n */\\r\\ncontract TSPAccount is SimpleAccount, ITSPAccount {\\r\\n    // the operator can invoke the contract, but cannot modify the owner\\r\\n    address private _operator;\\r\\n\\r\\n    // a guardian contract through which the owner can modify the guardian and multi-signature rules\\r\\n    address private _guardian;\\r\\n\\r\\n    // the inviter of this account\\r\\n    address private _inviter;\\r\\n\\r\\n    mapping(string => string) private _metadata;\\r\\n\\r\\n    event InviterInitialized(address indexed inviter, address indexed invitee);\\r\\n\\r\\n    event SetMetadata(string indexed key, string indexed value);\\r\\n\\r\\n    constructor(IEntryPoint anEntryPoint) SimpleAccount(anEntryPoint) {}\\r\\n\\r\\n    function resetOwner(address newOwner) public {\\r\\n        require(newOwner != address(0), \\\"new owner is the zero address\\\");\\r\\n        _requireOwnerOrGuardian();\\r\\n        owner = newOwner;\\r\\n        emit ResetOwner(address(this), owner, newOwner);\\r\\n    }\\r\\n\\r\\n    function changeOperator(address operator) public onlyOwner {\\r\\n        // require(operator != address(0), \\\"operator is the zero address\\\");\\r\\n        // _requireFromEntryPointOrOwner();\\r\\n        _operator = operator;\\r\\n    }\\r\\n\\r\\n    function getGuardian() public view returns (address) {\\r\\n        return _guardian;\\r\\n    }\\r\\n\\r\\n    function getOperator() public view returns (address) {\\r\\n        return _operator;\\r\\n    }\\r\\n\\r\\n    function getInviter() public view returns (address) {\\r\\n        return _inviter;\\r\\n    }\\r\\n\\r\\n    function _requireOwnerOrGuardian() internal view {\\r\\n        require(\\r\\n            msg.sender == owner || msg.sender == _guardian,\\r\\n            \\\"account: not Owner or Guardian\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // Require the function call went through EntryPoint or owner or operator\\r\\n    function _requireFromEntryPointOrOwnerOrOperator() internal view {\\r\\n        require(\\r\\n            msg.sender == address(entryPoint()) ||\\r\\n                msg.sender == owner ||\\r\\n                msg.sender == _operator,\\r\\n            \\\"account: not Owner or EntryPoint or Operator\\\"\\r\\n        );\\r\\n    }\\r\\n\\r\\n    // Save the user's customized data\\r\\n    function setMetadata(\\r\\n        string memory key,\\r\\n        string memory value\\r\\n    ) public onlyOwner {\\r\\n        bytes memory bytesStr = bytes(value);\\r\\n        if (bytesStr.length == 0) {\\r\\n            delete _metadata[key];\\r\\n        }\\r\\n        _metadata[key] = value;\\r\\n        emit SetMetadata(key, value);\\r\\n    }\\r\\n\\r\\n    // Get user custom data\\r\\n    function getMetadata(\\r\\n        string memory key\\r\\n    ) public view onlyOwner returns (string memory value) {\\r\\n        value = _metadata[key];\\r\\n        if (bytes(value).length == 0) {\\r\\n            return \\\"\\\";\\r\\n        }\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * @dev The _entryPoint member is immutable, to reduce gas consumption.  To upgrade EntryPoint,\\r\\n     * a new implementation of SimpleAccount must be deployed with the new EntryPoint address, then upgrading\\r\\n     * the implementation by calling `upgradeTo()`\\r\\n     */\\r\\n    function initialize(\\r\\n        address anOwner,\\r\\n        address guardian,\\r\\n        uint256 threshold,\\r\\n        uint256 guardianDelay,\\r\\n        address[] memory guardians,\\r\\n        address inviter\\r\\n    ) public initializer {\\r\\n        _initialize(anOwner);\\r\\n        _changeGuardian(guardian);\\r\\n        IGuardian(_guardian).setConfig(\\r\\n            address(this),\\r\\n            IGuardian.GuardianConfig(guardians, threshold, guardianDelay)\\r\\n        );\\r\\n        if(inviter != address(0)) {\\r\\n            // self-invite is not allowed\\r\\n            require(inviter != address(this), \\\"inviter is oneself\\\");\\r\\n        }\\r\\n        _inviter = inviter;\\r\\n        emit InviterInitialized(inviter, address(this));\\r\\n    }\\r\\n\\r\\n    function changeGuardian(address guardian) public onlyOwner {\\r\\n        _changeGuardian(guardian);\\r\\n    }\\r\\n\\r\\n    function _changeGuardian(address guardian) internal {\\r\\n        require(guardian != address(0), \\\"guardian is the zero address\\\");\\r\\n        _guardian = guardian;\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * execute a transaction (called directly from owner, or by entryPoint)\\r\\n     */\\r\\n    function execute(\\r\\n        address dest,\\r\\n        uint256 value,\\r\\n        bytes calldata func\\r\\n    ) external override {\\r\\n        _requireFromEntryPointOrOwnerOrOperator();\\r\\n        _call(dest, value, func);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * execute a sequence of transactions\\r\\n     */\\r\\n    function executeBatch(\\r\\n        address[] calldata dest,\\r\\n        uint256[] calldata value,\\r\\n        bytes[] calldata func\\r\\n    ) external override {\\r\\n        _requireFromEntryPointOrOwnerOrOperator();\\r\\n        require(\\r\\n            dest.length == func.length && dest.length == value.length,\\r\\n            \\\"wrong array lengths\\\"\\r\\n        );\\r\\n        for (uint256 i = 0; i < dest.length; i++) {\\r\\n            _call(dest[i], value[i], func[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function getVersion() public pure virtual returns (uint) {\\r\\n        return 1;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x723816ea68acb81a9661e14382d14ee0dc390d6c9fd7446a93380e68387f9cc8\",\"license\":\"GPL-3.0\"},\"contracts/samples/TSPAccountFactory.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8.12;\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/Create2.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol\\\";\\r\\n\\r\\nimport \\\"./TSPAccount.sol\\\";\\r\\nimport \\\"./Guardian.sol\\\";\\r\\n\\r\\n/**\\r\\n * A sample factory contract for SimpleAccount\\r\\n * A UserOperations \\\"initCode\\\" holds the address of the factory, and a method call (to createAccount, in this sample factory).\\r\\n * The factory's createAccount returns the target account address even if it is already installed.\\r\\n * This way, the entryPoint.getSenderAddress() can be called either before or after the account is created.\\r\\n */\\r\\ncontract TSPAccountFactory {\\r\\n    TSPAccount public immutable accountImplementation;\\r\\n\\r\\n    constructor(IEntryPoint _entryPoint) {\\r\\n        accountImplementation = new TSPAccount(_entryPoint);\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * create an account, and return its address.\\r\\n     * returns the address even if the account is already deployed.\\r\\n     * Note that during UserOperation execution, this method is called only if the account is not deployed.\\r\\n     * This method returns an existing account address so that entryPoint.getSenderAddress() would work even after account creation\\r\\n     */\\r\\n    function createAccount(\\r\\n        address owner,\\r\\n        uint256 salt,\\r\\n        address guardian,\\r\\n        uint256 threshold,\\r\\n        uint256 guardianDelay,\\r\\n        address[] memory guardians,\\r\\n        address inviter\\r\\n    ) public returns (TSPAccount ret) {\\r\\n        address addr = getAddress(\\r\\n            owner,\\r\\n            salt,\\r\\n            guardian,\\r\\n            threshold,\\r\\n            guardianDelay,\\r\\n            guardians,\\r\\n            inviter\\r\\n        );\\r\\n        uint codeSize = addr.code.length;\\r\\n        if (codeSize > 0) {\\r\\n            return TSPAccount(payable(addr));\\r\\n        }\\r\\n\\r\\n        ret = TSPAccount(\\r\\n            payable(\\r\\n                new ERC1967Proxy{salt: bytes32(salt)}(\\r\\n                    address(accountImplementation),\\r\\n                    abi.encodeCall(\\r\\n                        TSPAccount.initialize,\\r\\n                        (owner, guardian, threshold, guardianDelay, guardians, inviter)\\r\\n                    )\\r\\n                )\\r\\n            )\\r\\n        );\\r\\n    }\\r\\n\\r\\n    /**\\r\\n     * calculate the counterfactual address of this account as it would be returned by createAccount()\\r\\n     */\\r\\n    function getAddress(\\r\\n        address owner,\\r\\n        uint256 salt,\\r\\n        address guardian,\\r\\n        uint256 threshold,\\r\\n        uint256 guardianDelay,\\r\\n        address[] memory guardians,\\r\\n        address inviter\\r\\n    ) public view returns (address) {\\r\\n        return\\r\\n            Create2.computeAddress(\\r\\n                bytes32(salt),\\r\\n                keccak256(\\r\\n                    abi.encodePacked(\\r\\n                        type(ERC1967Proxy).creationCode,\\r\\n                        abi.encode(\\r\\n                            address(accountImplementation),\\r\\n                            abi.encodeCall(\\r\\n                                TSPAccount.initialize,\\r\\n                                (\\r\\n                                    owner,\\r\\n                                    guardian,\\r\\n                                    threshold,\\r\\n                                    guardianDelay,\\r\\n                                    guardians,\\r\\n                                    inviter\\r\\n                                )\\r\\n                            )\\r\\n                        )\\r\\n                    )\\r\\n                )\\r\\n            );\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x07592d31160df1a90a57cc8544d1bf8649bdbce14844ea50e5d5f15164e4cca0\",\"license\":\"GPL-3.0\"},\"contracts/samples/callback/TokenCallbackHandler.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\r\\npragma solidity ^0.8.12;\\r\\n\\r\\n/* solhint-disable no-empty-blocks */\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC777/IERC777Recipient.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC1155/IERC1155Receiver.sol\\\";\\r\\n\\r\\n/**\\r\\n * Token callback handler.\\r\\n *   Handles supported tokens' callbacks, allowing account receiving these tokens.\\r\\n */\\r\\ncontract TokenCallbackHandler is IERC777Recipient, IERC721Receiver, IERC1155Receiver {\\r\\n    function tokensReceived(\\r\\n        address,\\r\\n        address,\\r\\n        address,\\r\\n        uint256,\\r\\n        bytes calldata,\\r\\n        bytes calldata\\r\\n    ) external pure override {\\r\\n    }\\r\\n\\r\\n    function onERC721Received(\\r\\n        address,\\r\\n        address,\\r\\n        uint256,\\r\\n        bytes calldata\\r\\n    ) external pure override returns (bytes4) {\\r\\n        return IERC721Receiver.onERC721Received.selector;\\r\\n    }\\r\\n\\r\\n    function onERC1155Received(\\r\\n        address,\\r\\n        address,\\r\\n        uint256,\\r\\n        uint256,\\r\\n        bytes calldata\\r\\n    ) external pure override returns (bytes4) {\\r\\n        return IERC1155Receiver.onERC1155Received.selector;\\r\\n    }\\r\\n\\r\\n    function onERC1155BatchReceived(\\r\\n        address,\\r\\n        address,\\r\\n        uint256[] calldata,\\r\\n        uint256[] calldata,\\r\\n        bytes calldata\\r\\n    ) external pure override returns (bytes4) {\\r\\n        return IERC1155Receiver.onERC1155BatchReceived.selector;\\r\\n    }\\r\\n\\r\\n    function supportsInterface(bytes4 interfaceId) external view virtual override returns (bool) {\\r\\n        return\\r\\n            interfaceId == type(IERC721Receiver).interfaceId ||\\r\\n            interfaceId == type(IERC1155Receiver).interfaceId ||\\r\\n            interfaceId == type(IERC165).interfaceId;\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0xacdacb2db2c07979e600b2559935645e720d7f65b7a97e61da7355659083ce65\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b5060405161443b38038061443b83398101604081905261002f91610088565b8060405161003c9061007b565b6001600160a01b039091168152602001604051809103906000f080158015610068573d6000803e3d6000fd5b506001600160a01b0316608052506100b8565b6134ae80610f8d83390190565b60006020828403121561009a57600080fd5b81516001600160a01b03811681146100b157600080fd5b9392505050565b608051610eae6100df6000396000818160510152818160fc015261026b0152610eae6000f3fe60806040523480156200001157600080fd5b5060043610620000465760003560e01c806311464fbe146200004b57806358b70a69146200009c5780637e77931614620000b3575b600080fd5b620000737f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b62000073620000ad3660046200040d565b620000ca565b62000073620000c43660046200040d565b62000227565b6000620002198760001b60405180602001620000e690620003a6565b6020820181038252601f19601f820116604052507f00000000000000000000000000000000000000000000000000000000000000008b8a8a8a8a8a604051602401620001389695949392919062000555565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152918152602080830180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fc01d9ac9000000000000000000000000000000000000000000000000000000001790529051620001bf9392910162000614565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815290829052620001fd929160200162000684565b6040516020818303038152906040528051906020012062000366565b90505b979650505050505050565b6000806200023b89898989898989620000ca565b905073ffffffffffffffffffffffffffffffffffffffff81163b801562000265575090506200021c565b8860001b7f00000000000000000000000000000000000000000000000000000000000000008b8a8a8a8a8a604051602401620002a79695949392919062000555565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fc01d9ac900000000000000000000000000000000000000000000000000000000179052516200032990620003a6565b6200033692919062000614565b8190604051809103906000f590508015801562000357573d6000803e3d6000fd5b509a9950505050505050505050565b6000620003758383306200037c565b9392505050565b6000604051836040820152846020820152828152600b8101905060ff815360559020949350505050565b6107c180620006b883390190565b803573ffffffffffffffffffffffffffffffffffffffff81168114620003d957600080fd5b919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080600080600080600060e0888a0312156200042957600080fd5b6200043488620003b4565b965060208089013596506200044c60408a01620003b4565b9550606089013594506080890135935060a089013567ffffffffffffffff808211156200047857600080fd5b818b0191508b601f8301126200048d57600080fd5b813581811115620004a257620004a2620003de565b8060051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f83011681018181108582111715620004e857620004e8620003de565b60405291825284820192508381018501918e8311156200050757600080fd5b938501935b8285101562000530576200052085620003b4565b845293850193928501926200050c565b8097505050505050506200054760c08901620003b4565b905092959891949750929550565b600060c0820173ffffffffffffffffffffffffffffffffffffffff808a1684526020818a168186015288604086015287606086015260c0608086015282875180855260e087019150828901945060005b81811015620005c5578551851683529483019491830191600101620005a5565b5050809450505080851660a08501525050979650505050505050565b60005b83811015620005fe578181015183820152602001620005e4565b838111156200060e576000848401525b50505050565b73ffffffffffffffffffffffffffffffffffffffff83168152604060208201526000825180604084015262000651816060850160208701620005e1565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016060019392505050565b6000835162000698818460208801620005e1565b835190830190620006ae818360208801620005e1565b0194935050505056fe60806040526040516107c13803806107c183398101604081905261002291610321565b61002e82826000610035565b505061043e565b61003e8361006b565b60008251118061004b5750805b156100665761006483836100ab60201b6100291760201c565b505b505050565b610074816100d7565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606100d0838360405180606001604052806027815260200161079a602791396101a9565b9392505050565b6100ea8161022260201b6100551760201c565b6101515760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084015b60405180910390fd5b806101887f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b61023160201b6100711760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b6060600080856001600160a01b0316856040516101c691906103ef565b600060405180830381855af49150503d8060008114610201576040519150601f19603f3d011682016040523d82523d6000602084013e610206565b606091505b50909250905061021886838387610234565b9695505050505050565b6001600160a01b03163b151590565b90565b606083156102a357825160000361029c576001600160a01b0385163b61029c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610148565b50816102ad565b6102ad83836102b5565b949350505050565b8151156102c55781518083602001fd5b8060405162461bcd60e51b8152600401610148919061040b565b634e487b7160e01b600052604160045260246000fd5b60005b838110156103105781810151838201526020016102f8565b838111156100645750506000910152565b6000806040838503121561033457600080fd5b82516001600160a01b038116811461034b57600080fd5b60208401519092506001600160401b038082111561036857600080fd5b818501915085601f83011261037c57600080fd5b81518181111561038e5761038e6102df565b604051601f8201601f19908116603f011681019083821181831017156103b6576103b66102df565b816040528281528860208487010111156103cf57600080fd5b6103e08360208301602088016102f5565b80955050505050509250929050565b600082516104018184602087016102f5565b9190910192915050565b602081526000825180602084015261042a8160408501602087016102f5565b601f01601f19169190910160400192915050565b61034d8061044d6000396000f3fe60806040523661001357610011610017565b005b6100115b610027610022610074565b6100b9565b565b606061004e83836040518060600160405280602781526020016102f1602791396100dd565b9392505050565b73ffffffffffffffffffffffffffffffffffffffff163b151590565b90565b60006100b47f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b3660008037600080366000845af43d6000803e8080156100d8573d6000f35b3d6000fd5b60606000808573ffffffffffffffffffffffffffffffffffffffff16856040516101079190610283565b600060405180830381855af49150503d8060008114610142576040519150601f19603f3d011682016040523d82523d6000602084013e610147565b606091505b509150915061015886838387610162565b9695505050505050565b606083156101fd5782516000036101f65773ffffffffffffffffffffffffffffffffffffffff85163b6101f6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064015b60405180910390fd5b5081610207565b610207838361020f565b949350505050565b81511561021f5781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ed919061029f565b60005b8381101561026e578181015183820152602001610256565b8381111561027d576000848401525b50505050565b60008251610295818460208701610253565b9190910192915050565b60208152600082518060208401526102be816040850160208701610253565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212201cd78ab6a31213989661cff2d7d05fc9b9c38b1a848e8249e2e398659a9eb7e364736f6c634300080f0033416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220e6bef8f6bd6a4c80ea3a14f92d62db0a3c81ecc18976ff488833c2b48b445a0564736f6c634300080f003360c0604052306080523480156200001557600080fd5b50604051620034ae380380620034ae83398101604081905262000038916200011a565b6001600160a01b03811660a052806200005062000058565b50506200014c565b600054610100900460ff1615620000c55760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff908116101562000118576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6000602082840312156200012d57600080fd5b81516001600160a01b03811681146200014557600080fd5b9392505050565b60805160a0516132ef620001bf6000396000818161049f01528181610aed01528181610b9b015281816114e30152818161173401528181611bb001528181611da001526120130152600081816107920152818161084701528181610c5f01528181610d0f0152610f1a01526132ef6000f3fe6080604052600436106101ba5760003560e01c806373cc802a116100ec578063c01d9ac91161008a578063d087d28811610064578063d087d28814610580578063d11a1f0714610595578063e7f43c68146105c2578063f23a6e61146105ed57600080fd5b8063c01d9ac91461052b578063c399ec881461054b578063c4d66de81461056057600080fd5b8063a75b87d2116100c6578063a75b87d214610465578063b0d691fe14610490578063b61d27f6146104c3578063bc197c81146104e357600080fd5b806373cc802a146103c65780637c41c9a1146103e65780638da5cb5b1461043257600080fd5b80633a871cdd116101595780634d44560d116101335780634d44560d1461035e5780634f1ef2861461037e57806351335b501461039157806352d1902d146103b157600080fd5b80633a871cdd1461031657806347e1da2a146103365780634a58db191461035657600080fd5b80630d8e6e2c116101955780630d8e6e2c14610242578063150b7a02146102605780632fcb4f04146102d65780633659cfe6146102f657600080fd5b806223de29146101c657806301ffc9a7146101ed57806306394c9b1461022257600080fd5b366101c157005b600080fd5b3480156101d257600080fd5b506101eb6101e1366004612736565b5050505050505050565b005b3480156101f957600080fd5b5061020d6102083660046127e7565b610633565b60405190151581526020015b60405180910390f35b34801561022e57600080fd5b506101eb61023d366004612829565b610718565b34801561024e57600080fd5b5060015b604051908152602001610219565b34801561026c57600080fd5b506102a561027b366004612846565b7f150b7a020000000000000000000000000000000000000000000000000000000095945050505050565b6040517fffffffff000000000000000000000000000000000000000000000000000000009091168152602001610219565b3480156102e257600080fd5b506101eb6102f1366004612829565b610767565b34801561030257600080fd5b506101eb610311366004612829565b61077b565b34801561032257600080fd5b506102526103313660046128b9565b610982565b34801561034257600080fd5b506101eb610351366004612952565b6109a8565b6101eb610aeb565b34801561036a57600080fd5b506101eb6103793660046129ec565b610b91565b6101eb61038c366004612b0c565b610c48565b34801561039d57600080fd5b506101eb6103ac366004612b90565b610e3e565b3480156103bd57600080fd5b50610252610f00565b3480156103d257600080fd5b506101eb6103e1366004612829565b610fec565b3480156103f257600080fd5b5060035473ffffffffffffffffffffffffffffffffffffffff165b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610219565b34801561043e57600080fd5b5060005461040d9062010000900473ffffffffffffffffffffffffffffffffffffffff1681565b34801561047157600080fd5b5060025473ffffffffffffffffffffffffffffffffffffffff1661040d565b34801561049c57600080fd5b507f000000000000000000000000000000000000000000000000000000000000000061040d565b3480156104cf57600080fd5b506101eb6104de366004612bea565b611101565b3480156104ef57600080fd5b506102a56104fe366004612c46565b7fbc197c810000000000000000000000000000000000000000000000000000000098975050505050505050565b34801561053757600080fd5b506101eb610546366004612ce4565b611150565b34801561055757600080fd5b5061025261149d565b34801561056c57600080fd5b506101eb61057b366004612829565b611554565b34801561058c57600080fd5b506102526116e7565b3480156105a157600080fd5b506105b56105b0366004612de0565b611763565b6040516102199190612e41565b3480156105ce57600080fd5b5060015473ffffffffffffffffffffffffffffffffffffffff1661040d565b3480156105f957600080fd5b506102a5610608366004612e92565b7ff23a6e61000000000000000000000000000000000000000000000000000000009695505050505050565b60007fffffffff0000000000000000000000000000000000000000000000000000000082167f150b7a020000000000000000000000000000000000000000000000000000000014806106c657507fffffffff0000000000000000000000000000000000000000000000000000000082167f4e2312e000000000000000000000000000000000000000000000000000000000145b8061071257507fffffffff0000000000000000000000000000000000000000000000000000000082167f01ffc9a700000000000000000000000000000000000000000000000000000000145b92915050565b610720611835565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b61076f611835565b610778816118c8565b50565b73ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000163003610845576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c000000000000000000000000000000000000000060648201526084015b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166108ba7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff161461095d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f78790000000000000000000000000000000000000000606482015260840161083c565b6109668161198c565b6040805160008082526020820190925261077891839190611994565b600061098c611b98565b6109968484611c37565b90506109a182611d1d565b9392505050565b6109b0611d88565b84811480156109be57508483145b610a24576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f77726f6e67206172726179206c656e6774687300000000000000000000000000604482015260640161083c565b60005b85811015610ae257610ad0878783818110610a4457610a44612efc565b9050602002016020810190610a599190612829565b868684818110610a6b57610a6b612efc565b90506020020135858585818110610a8457610a84612efc565b9050602002810190610a969190612f2b565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611e9792505050565b80610ada81612f90565b915050610a27565b50505050505050565b7f00000000000000000000000000000000000000000000000000000000000000006040517fb760faf900000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff919091169063b760faf99034906024016000604051808303818588803b158015610b7657600080fd5b505af1158015610b8a573d6000803e3d6000fd5b5050505050565b610b99611835565b7f00000000000000000000000000000000000000000000000000000000000000006040517f205c287800000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff848116600483015260248201849052919091169063205c287890604401600060405180830381600087803b158015610c2c57600080fd5b505af1158015610c40573d6000803e3d6000fd5b505050505050565b73ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000163003610d0d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c0000000000000000000000000000000000000000606482015260840161083c565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16610d827f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1614610e25576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f78790000000000000000000000000000000000000000606482015260840161083c565b610e2e8261198c565b610e3a82826001611994565b5050565b610e46611835565b80518190600003610e7b57600483604051610e619190612fef565b90815260200160405180910390206000610e7b9190612679565b81600484604051610e8c9190612fef565b90815260200160405180910390209081610ea691906130a4565b5081604051610eb59190612fef565b604051809103902083604051610ecb9190612fef565b604051908190038120907fad065cd6a1dddac2dc7e27f909052e40232570d17e2074ca52052eaf7ed84da190600090a3505050565b60003073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610fc7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c0000000000000000606482015260840161083c565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b73ffffffffffffffffffffffffffffffffffffffff8116611069576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f6e6577206f776e657220697320746865207a65726f2061646472657373000000604482015260640161083c565b611071611f14565b600080547fffffffffffffffffffff0000000000000000000000000000000000000000ffff166201000073ffffffffffffffffffffffffffffffffffffffff84811682810293909317938490556040805192909404168152602081019190915230917f062163f9c32b5f0b299e6e69f3bb349798cb5a44e0484821341ae9b5a5f8101d910160405180910390a250565b611109611d88565b61114a848484848080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611e9792505050565b50505050565b600054610100900460ff16158080156111705750600054600160ff909116105b8061118a5750303b15801561118a575060005460ff166001145b611216576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a6564000000000000000000000000000000000000606482015260840161083c565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055801561127457600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b61127d87611fbd565b611286866118c8565b600254604080516060810182528581526020810188905280820187905290517fd1f9445400000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff9092169163d1f94454916112f6913091906004016131be565b600060405180830381600087803b15801561131057600080fd5b505af1158015611324573d6000803e3d6000fd5b5050505073ffffffffffffffffffffffffffffffffffffffff8216156113c3573073ffffffffffffffffffffffffffffffffffffffff8316036113c3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601260248201527f696e7669746572206973206f6e6573656c660000000000000000000000000000604482015260640161083c565b600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff84169081179091556040513091907f01c8fc2b86c63c18e9c37734988f6bb64b36f8b1235129a751f90ab2e4d959eb90600090a38015610ae257600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150505050505050565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906370a08231906024015b602060405180830381865afa15801561152b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061154f919061324a565b905090565b600054610100900460ff16158080156115745750600054600160ff909116105b8061158e5750303b15801561158e575060005460ff166001145b61161a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a6564000000000000000000000000000000000000606482015260840161083c565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00166001179055801561167857600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b61168182611fbd565b8015610e3a57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15050565b6040517f35567e1a0000000000000000000000000000000000000000000000000000000081523060048201526000602482018190529073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906335567e1a9060440161150e565b606061176d611835565b60048260405161177d9190612fef565b908152602001604051809103902080546117969061300b565b80601f01602080910402602001604051908101604052809291908181526020018280546117c29061300b565b801561180f5780601f106117e45761010080835404028352916020019161180f565b820191906000526020600020905b8154815290600101906020018083116117f257829003601f168201915b50505050509050805160000361183057506040805160208101909152600081525b919050565b60005462010000900473ffffffffffffffffffffffffffffffffffffffff1633148061186057503330145b6118c6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600a60248201527f6f6e6c79206f776e657200000000000000000000000000000000000000000000604482015260640161083c565b565b73ffffffffffffffffffffffffffffffffffffffff8116611945576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f677561726469616e20697320746865207a65726f206164647265737300000000604482015260640161083c565b600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b610778611835565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff16156119cc576119c78361205c565b505050565b8273ffffffffffffffffffffffffffffffffffffffff166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015611a51575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201909252611a4e9181019061324a565b60015b611add576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f742055555053000000000000000000000000000000000000606482015260840161083c565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8114611b8c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c65555549440000000000000000000000000000000000000000000000606482015260840161083c565b506119c7838383612166565b3373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146118c6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f6163636f756e743a206e6f742066726f6d20456e747279506f696e7400000000604482015260640161083c565b600080611c91836040517f19457468657265756d205369676e6564204d6573736167653a0a3332000000006020820152603c8101829052600090605c01604051602081830303815290604052805190602001209050919050565b9050611ce1611ca4610140860186612f2b565b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250859392505061218b9050565b60005462010000900473ffffffffffffffffffffffffffffffffffffffff908116911614611d13576001915050610712565b5060009392505050565b80156107785760405160009033907fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90849084818181858888f193505050503d8060008114610b8a576040519150601f19603f3d011682016040523d82523d6000602084013e610b8a565b3373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161480611de9575060005462010000900473ffffffffffffffffffffffffffffffffffffffff1633145b80611e0b575060015473ffffffffffffffffffffffffffffffffffffffff1633145b6118c6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f6163636f756e743a206e6f74204f776e6572206f7220456e747279506f696e7460448201527f206f72204f70657261746f720000000000000000000000000000000000000000606482015260840161083c565b6000808473ffffffffffffffffffffffffffffffffffffffff168484604051611ec09190612fef565b60006040518083038185875af1925050503d8060008114611efd576040519150601f19603f3d011682016040523d82523d6000602084013e611f02565b606091505b509150915081610b8a57805160208201fd5b60005462010000900473ffffffffffffffffffffffffffffffffffffffff16331480611f57575060025473ffffffffffffffffffffffffffffffffffffffff1633145b6118c6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601e60248201527f6163636f756e743a206e6f74204f776e6572206f7220477561726469616e0000604482015260640161083c565b600080547fffffffffffffffffffff0000000000000000000000000000000000000000ffff166201000073ffffffffffffffffffffffffffffffffffffffff8481168202929092178084556040519190048216927f0000000000000000000000000000000000000000000000000000000000000000909216917f47e55c76e7a6f1fd8996a1da8008c1ea29699cca35e7bcd057f2dec313b6e5de91a350565b73ffffffffffffffffffffffffffffffffffffffff81163b612100576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e747261637400000000000000000000000000000000000000606482015260840161083c565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b61216f836121af565b60008251118061217c5750805b156119c75761114a83836121fc565b600080600061219a8585612221565b915091506121a781612266565b509392505050565b6121b88161205c565b60405173ffffffffffffffffffffffffffffffffffffffff8216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606109a1838360405180606001604052806027815260200161329360279139612419565b60008082516041036122575760208301516040840151606085015160001a61224b8782858561249e565b9450945050505061225f565b506000905060025b9250929050565b600081600481111561227a5761227a613263565b036122825750565b600181600481111561229657612296613263565b036122fd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f45434453413a20696e76616c6964207369676e61747572650000000000000000604482015260640161083c565b600281600481111561231157612311613263565b03612378576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e67746800604482015260640161083c565b600381600481111561238c5761238c613263565b03610778576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c60448201527f7565000000000000000000000000000000000000000000000000000000000000606482015260840161083c565b60606000808573ffffffffffffffffffffffffffffffffffffffff16856040516124439190612fef565b600060405180830381855af49150503d806000811461247e576040519150601f19603f3d011682016040523d82523d6000602084013e612483565b606091505b50915091506124948683838761258d565b9695505050505050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08311156124d55750600090506003612584565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015612529573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff811661257d57600060019250925050612584565b9150600090505b94509492505050565b6060831561262357825160000361261c5773ffffffffffffffffffffffffffffffffffffffff85163b61261c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161083c565b508161262d565b61262d8383612635565b949350505050565b8151156126455781518083602001fd5b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161083c9190612e41565b5080546126859061300b565b6000825580601f10612695575050565b601f01602090049060005260206000209081019061077891905b808211156126c357600081556001016126af565b5090565b73ffffffffffffffffffffffffffffffffffffffff8116811461077857600080fd5b8035611830816126c7565b60008083601f84011261270657600080fd5b50813567ffffffffffffffff81111561271e57600080fd5b60208301915083602082850101111561225f57600080fd5b60008060008060008060008060c0898b03121561275257600080fd5b883561275d816126c7565b9750602089013561276d816126c7565b9650604089013561277d816126c7565b955060608901359450608089013567ffffffffffffffff808211156127a157600080fd5b6127ad8c838d016126f4565b909650945060a08b01359150808211156127c657600080fd5b506127d38b828c016126f4565b999c989b5096995094979396929594505050565b6000602082840312156127f957600080fd5b81357fffffffff00000000000000000000000000000000000000000000000000000000811681146109a157600080fd5b60006020828403121561283b57600080fd5b81356109a1816126c7565b60008060008060006080868803121561285e57600080fd5b8535612869816126c7565b94506020860135612879816126c7565b935060408601359250606086013567ffffffffffffffff81111561289c57600080fd5b6128a8888289016126f4565b969995985093965092949392505050565b6000806000606084860312156128ce57600080fd5b833567ffffffffffffffff8111156128e557600080fd5b840161016081870312156128f857600080fd5b95602085013595506040909401359392505050565b60008083601f84011261291f57600080fd5b50813567ffffffffffffffff81111561293757600080fd5b6020830191508360208260051b850101111561225f57600080fd5b6000806000806000806060878903121561296b57600080fd5b863567ffffffffffffffff8082111561298357600080fd5b61298f8a838b0161290d565b909850965060208901359150808211156129a857600080fd5b6129b48a838b0161290d565b909650945060408901359150808211156129cd57600080fd5b506129da89828a0161290d565b979a9699509497509295939492505050565b600080604083850312156129ff57600080fd5b8235612a0a816126c7565b946020939093013593505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715612a8e57612a8e612a18565b604052919050565b600067ffffffffffffffff831115612ab057612ab0612a18565b612ae160207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f86011601612a47565b9050828152838383011115612af557600080fd5b828260208301376000602084830101529392505050565b60008060408385031215612b1f57600080fd5b8235612b2a816126c7565b9150602083013567ffffffffffffffff811115612b4657600080fd5b8301601f81018513612b5757600080fd5b612b6685823560208401612a96565b9150509250929050565b600082601f830112612b8157600080fd5b6109a183833560208501612a96565b60008060408385031215612ba357600080fd5b823567ffffffffffffffff80821115612bbb57600080fd5b612bc786838701612b70565b93506020850135915080821115612bdd57600080fd5b50612b6685828601612b70565b60008060008060608587031215612c0057600080fd5b8435612c0b816126c7565b935060208501359250604085013567ffffffffffffffff811115612c2e57600080fd5b612c3a878288016126f4565b95989497509550505050565b60008060008060008060008060a0898b031215612c6257600080fd5b8835612c6d816126c7565b97506020890135612c7d816126c7565b9650604089013567ffffffffffffffff80821115612c9a57600080fd5b612ca68c838d0161290d565b909850965060608b0135915080821115612cbf57600080fd5b612ccb8c838d0161290d565b909650945060808b01359150808211156127c657600080fd5b60008060008060008060c08789031215612cfd57600080fd5b8635612d08816126c7565b9550602087810135612d19816126c7565b95506040880135945060608801359350608088013567ffffffffffffffff80821115612d4457600080fd5b818a0191508a601f830112612d5857600080fd5b813581811115612d6a57612d6a612a18565b8060051b9150612d7b848301612a47565b818152918301840191848101908d841115612d9557600080fd5b938501935b83851015612dbf5784359250612daf836126c7565b8282529385019390850190612d9a565b809750505050505050612dd460a088016126e9565b90509295509295509295565b600060208284031215612df257600080fd5b813567ffffffffffffffff811115612e0957600080fd5b61262d84828501612b70565b60005b83811015612e30578181015183820152602001612e18565b8381111561114a5750506000910152565b6020815260008251806020840152612e60816040850160208701612e15565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b60008060008060008060a08789031215612eab57600080fd5b8635612eb6816126c7565b95506020870135612ec6816126c7565b94506040870135935060608701359250608087013567ffffffffffffffff811115612ef057600080fd5b6129da89828a016126f4565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112612f6057600080fd5b83018035915067ffffffffffffffff821115612f7b57600080fd5b60200191503681900382131561225f57600080fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612fe8577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b5060010190565b60008251613001818460208701612e15565b9190910192915050565b600181811c9082168061301f57607f821691505b602082108103613058577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b601f8211156119c757600081815260208120601f850160051c810160208610156130855750805b601f850160051c820191505b81811015610c4057828155600101613091565b815167ffffffffffffffff8111156130be576130be612a18565b6130d2816130cc845461300b565b8461305e565b602080601f83116001811461312557600084156130ef5750858301515b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600386901b1c1916600185901b178555610c40565b6000858152602081207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08616915b8281101561317257888601518255948401946001909101908401613153565b50858210156131ae57878501517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff600388901b60f8161c191681555b5050505050600190811b01905550565b600073ffffffffffffffffffffffffffffffffffffffff8085168352602060408185015260a0840185516060604087015281815180845260c0880191508483019350600092505b8083101561322757835186168252928401926001929092019190840190613205565b508388015160608801526040880151608088015280955050505050509392505050565b60006020828403121561325c57600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fdfe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212207db928c61b8dc66082603e4a77036ff4d8e55ccae2aec484eaef9f2d8d537b7864736f6c634300080f0033",
  "deployedBytecode": "0x60806040523480156200001157600080fd5b5060043610620000465760003560e01c806311464fbe146200004b57806358b70a69146200009c5780637e77931614620000b3575b600080fd5b620000737f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b62000073620000ad3660046200040d565b620000ca565b62000073620000c43660046200040d565b62000227565b6000620002198760001b60405180602001620000e690620003a6565b6020820181038252601f19601f820116604052507f00000000000000000000000000000000000000000000000000000000000000008b8a8a8a8a8a604051602401620001389695949392919062000555565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152918152602080830180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fc01d9ac9000000000000000000000000000000000000000000000000000000001790529051620001bf9392910162000614565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815290829052620001fd929160200162000684565b6040516020818303038152906040528051906020012062000366565b90505b979650505050505050565b6000806200023b89898989898989620000ca565b905073ffffffffffffffffffffffffffffffffffffffff81163b801562000265575090506200021c565b8860001b7f00000000000000000000000000000000000000000000000000000000000000008b8a8a8a8a8a604051602401620002a79695949392919062000555565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fc01d9ac900000000000000000000000000000000000000000000000000000000179052516200032990620003a6565b6200033692919062000614565b8190604051809103906000f590508015801562000357573d6000803e3d6000fd5b509a9950505050505050505050565b6000620003758383306200037c565b9392505050565b6000604051836040820152846020820152828152600b8101905060ff815360559020949350505050565b6107c180620006b883390190565b803573ffffffffffffffffffffffffffffffffffffffff81168114620003d957600080fd5b919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080600080600080600060e0888a0312156200042957600080fd5b6200043488620003b4565b965060208089013596506200044c60408a01620003b4565b9550606089013594506080890135935060a089013567ffffffffffffffff808211156200047857600080fd5b818b0191508b601f8301126200048d57600080fd5b813581811115620004a257620004a2620003de565b8060051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f83011681018181108582111715620004e857620004e8620003de565b60405291825284820192508381018501918e8311156200050757600080fd5b938501935b8285101562000530576200052085620003b4565b845293850193928501926200050c565b8097505050505050506200054760c08901620003b4565b905092959891949750929550565b600060c0820173ffffffffffffffffffffffffffffffffffffffff808a1684526020818a168186015288604086015287606086015260c0608086015282875180855260e087019150828901945060005b81811015620005c5578551851683529483019491830191600101620005a5565b5050809450505080851660a08501525050979650505050505050565b60005b83811015620005fe578181015183820152602001620005e4565b838111156200060e576000848401525b50505050565b73ffffffffffffffffffffffffffffffffffffffff83168152604060208201526000825180604084015262000651816060850160208701620005e1565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016060019392505050565b6000835162000698818460208801620005e1565b835190830190620006ae818360208801620005e1565b0194935050505056fe60806040526040516107c13803806107c183398101604081905261002291610321565b61002e82826000610035565b505061043e565b61003e8361006b565b60008251118061004b5750805b156100665761006483836100ab60201b6100291760201c565b505b505050565b610074816100d7565b6040516001600160a01b038216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b60606100d0838360405180606001604052806027815260200161079a602791396101a9565b9392505050565b6100ea8161022260201b6100551760201c565b6101515760405162461bcd60e51b815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201526c1bdd08184818dbdb9d1c9858dd609a1b60648201526084015b60405180910390fd5b806101887f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc60001b61023160201b6100711760201c565b80546001600160a01b0319166001600160a01b039290921691909117905550565b6060600080856001600160a01b0316856040516101c691906103ef565b600060405180830381855af49150503d8060008114610201576040519150601f19603f3d011682016040523d82523d6000602084013e610206565b606091505b50909250905061021886838387610234565b9695505050505050565b6001600160a01b03163b151590565b90565b606083156102a357825160000361029c576001600160a01b0385163b61029c5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610148565b50816102ad565b6102ad83836102b5565b949350505050565b8151156102c55781518083602001fd5b8060405162461bcd60e51b8152600401610148919061040b565b634e487b7160e01b600052604160045260246000fd5b60005b838110156103105781810151838201526020016102f8565b838111156100645750506000910152565b6000806040838503121561033457600080fd5b82516001600160a01b038116811461034b57600080fd5b60208401519092506001600160401b038082111561036857600080fd5b818501915085601f83011261037c57600080fd5b81518181111561038e5761038e6102df565b604051601f8201601f19908116603f011681019083821181831017156103b6576103b66102df565b816040528281528860208487010111156103cf57600080fd5b6103e08360208301602088016102f5565b80955050505050509250929050565b600082516104018184602087016102f5565b9190910192915050565b602081526000825180602084015261042a8160408501602087016102f5565b601f01601f19169190910160400192915050565b61034d8061044d6000396000f3fe60806040523661001357610011610017565b005b6100115b610027610022610074565b6100b9565b565b606061004e83836040518060600160405280602781526020016102f1602791396100dd565b9392505050565b73ffffffffffffffffffffffffffffffffffffffff163b151590565b90565b60006100b47f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5473ffffffffffffffffffffffffffffffffffffffff1690565b905090565b3660008037600080366000845af43d6000803e8080156100d8573d6000f35b3d6000fd5b60606000808573ffffffffffffffffffffffffffffffffffffffff16856040516101079190610283565b600060405180830381855af49150503d8060008114610142576040519150601f19603f3d011682016040523d82523d6000602084013e610147565b606091505b509150915061015886838387610162565b9695505050505050565b606083156101fd5782516000036101f65773ffffffffffffffffffffffffffffffffffffffff85163b6101f6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064015b60405180910390fd5b5081610207565b610207838361020f565b949350505050565b81511561021f5781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101ed919061029f565b60005b8381101561026e578181015183820152602001610256565b8381111561027d576000848401525b50505050565b60008251610295818460208701610253565b9190910192915050565b60208152600082518060208401526102be816040850160208701610253565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212201cd78ab6a31213989661cff2d7d05fc9b9c38b1a848e8249e2e398659a9eb7e364736f6c634300080f0033416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220e6bef8f6bd6a4c80ea3a14f92d62db0a3c81ecc18976ff488833c2b48b445a0564736f6c634300080f0033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "createAccount(address,uint256,address,uint256,uint256,address[],address)": {
        "notice": "create an account, and return its address. returns the address even if the account is already deployed. Note that during UserOperation execution, this method is called only if the account is not deployed. This method returns an existing account address so that entryPoint.getSenderAddress() would work even after account creation"
      },
      "getAddress(address,uint256,address,uint256,uint256,address[],address)": {
        "notice": "calculate the counterfactual address of this account as it would be returned by createAccount()"
      }
    },
    "notice": "A sample factory contract for SimpleAccount A UserOperations \"initCode\" holds the address of the factory, and a method call (to createAccount, in this sample factory). The factory's createAccount returns the target account address even if it is already installed. This way, the entryPoint.getSenderAddress() can be called either before or after the account is created.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}